{"version":3,"sources":["../src/Application.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAoB,UAAU;;;;qBACZ,SAAS;;;;sBACR,UAAU;;;;6BACH,iBAAiB;;;;+BACnB,oBAAoB;;;;uBACxB,WAAW;;;;+BACH,mBAAmB;;;;6BACrB,iBAAiB;;;;;;;;AAM3C,IAAI,aAAa,GAAG,SAAhB,aAAa,CAAa,MAAM,EAAE;;AAElC,QAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;;AAE5B,aAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;;AAElC,gBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAEpB,CAAC,CAAA;KACL,CAAC,CAAC;;AAEH,WAAO,IAAI,CAAC;CAEf,CAAC;;;;;;;IAMI,WAAW;AAEF,aAFT,WAAW,CAED,IAAI,EAAE;8BAFhB,WAAW;;AAGT,YAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AACtB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACtB;;iBATC,WAAW;;;;;;eAcC,wBAAC,IAAI,EAAE;AACjB,kBAAM,IAAI,KAAK,CAAC,gFAAgF,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;SAClH;;;;;;;;eAME,eAAG;;;AAEF,gBAAI,CAAC,MAAM,GAAG,wBAAW,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,gBAAI,CAAC,MAAM,GAAG,+BAAkB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpE,gBAAI,CAAC,IAAI,GAAG,yBAAY,EAAE,EAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACrD,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,gBAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;AACjE,gBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;uBAAE,OAAO,CAAC,UAAU,EAAE;aAAA,CAAC,CAAC;AACrD,gBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;uBAAE,OAAO,CAAC,cAAc,8BAAa;aAAA,CAAC,CAAC;;AAEpE,mBAAO,6BAAY,IAAI,EAAE,CACrB,IAAI,CAAC,YAAK;AACN,sBAAK,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;2BAAE,OAAO,CAAC,QAAQ,8BAAiB;iBAAA,CAAC,CAAC;aACrE,CAAC,CACF,IAAI,CAAC,YAAK;;AAEL,oBAAI,MAAM,GAAG,IAAI,mBAAM,MAAM,CAC1B,6BAAgB,QAAQ,EAAE,EAC1B,2BAAc,MAAM,CAAC,MAAK,MAAM,CAC5B,gBAAgB,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;;AAExD,uBAAO,MAAM,CAAC,WAAW,EAAE,CAAC;aAE/B,CAAC,CAAC;SACV;;;eAEY,yBAAG,EAAE;;;eAEL,uBAAC,IAAI,EAAE;AAChB,mBAAO,CAAC,GAAG,CAAC,yBAAyB,GAAC,IAAI,CAAC,CAAC;SAC/C;;;WApDC,WAAW;;;qBAwDF,WAAW","file":"Application.js","sourcesContent":["import Promise from 'bluebird';\nimport tasks from './tasks';\nimport Loader from './Loader';\nimport Configuration from './Configuration';\nimport Connections from './conn/Connections';\nimport Project from './Project';\nimport ProjectRegistry from './ProjectRegistry';\nimport TaskRecorders from './TaskRecorders';\n\n/**\n * flattenRoutes turns the conf/route.json file contents into one flat array.\n * @return {Array}\n */\nvar flattenRoutes = function (routes) {\n\n    var flat = [];\n\n    routes.forEach(function (route) {\n\n        route.routes.forEach(function (entry) {\n\n            flat.push(entry);\n\n        })\n    });\n\n    return flat;\n\n};\n\n/**\n * Application\n * @param {String} path\n */\nclass Application {\n\n    constructor(path) {\n        this.name = 'default';\n        this.path = path;\n        this.loader = null;\n        this.config = null;\n        this.main = null;\n        this.projects = [];\n    }\n\n    /**\n     * getModelByName should be overwritten to provide models for queries.\n     */\n    getModelByName(name) {\n        throw new Error('getModelByName() must be overwritten before a target can be provided. Target: ' + name + '.');\n    }\n\n    /**\n     * run\n     * @return {Promise}\n     */\n    run() {\n\n        this.loader = new Loader(this.path);\n        this.config = new Configuration(this.loader.loadFromConf('config'));\n        this.main = new Project('',this.config, this.loader);\n        this.projects.push(this.main);\n        this.projects = this.projects.concat(this.main.getSubProjects());\n        this.projects.forEach(project=>project.runPlugins());\n        this.projects.forEach(project=>project.setConnections(Connections));\n\n        return Connections.open().\n            then(()=> {\n                this.projects.forEach(project=>project.register(ProjectRegistry));\n            }).\n            then(()=> {\n\n                 var runner = new tasks.Runner(\n                    ProjectRegistry.getTasks(),\n                    TaskRecorders.create(this.config.\n                        readWithDefaults('tasks.recorder', 'console')));\n\n                return runner.runAllTasks();\n\n            });\n    }\n\n    serverCreated() {}\n\n    serverStarted(port) {\n        console.log('Server started on port '+port);\n    }\n\n}\n\nexport default Application\n"]}