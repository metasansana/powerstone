{"version":3,"sources":["../src/ServerFactory.js"],"names":[],"mappings":";;;;;;;;;;;;oBAAiB,MAAM;;;;qBACL,OAAO;;;;uBACL,SAAS;;;;;;;;;;;IAQtB,aAAa;WAAb,aAAa;0BAAb,aAAa;;;eAAb,aAAa;;;;;;;;WAOM,+BAAC,GAAG,EAAE;AAC1B,aAAO,kBAAK,YAAY,CAAC,GAAG,CAAC,CAAC;KAC/B;;;;;;;;;;WAQ2B,qCAAC,OAAO,EAAE,GAAG,EAAC;AACxC,aAAO,mBAAM,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KACzC;;;;;;;;WAMgB,0BAAC,OAAO,EAAC;AACxB,aAAO,qBAAQ,YAAY,CAAC,OAAO,CAAC,CAAC;KACtC;;;SA3BE,aAAa;;;qBA+BH,IAAI,aAAa,EAAE","file":"ServerFactory.js","sourcesContent":["import http from 'http';\nimport https from 'https';\nimport restify from 'restify';\n\n/**\n * ServerFactory provides new instances for http.Server or the\n * framework's own wrapper.\n *\n * Powerstone wraps these in its own wrapper to provide a maintainable api.\n */\n class ServerFactory {\n\n    /**\n     * createNativeWebServer creates and returns a http.Server\n     * @param {express.Application} app\n     * @returns {*}\n     */\n     createNativeWebServer(app) {\n      return http.createServer(app);\n    }\n\n    /**\n     * createSecureNativeWebServer creates and returns a https.Server\n     * @param {Object} options\n     * @param {express.Application} app\n     * @returns {*}\n     */\n     createSecureNativeWebServer(options, app){\n      return https.createServer(options, app);\n    }\n\n    /**\n     * createRestServer creates and returns a restify.Server\n     * @params {Object} options\n     */\n     createRESTServer(options){\n      return restify.createServer(options);\n    }\n\n  }\n\n  export default new ServerFactory()\n"]}