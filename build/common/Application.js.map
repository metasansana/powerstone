{"version":3,"sources":["../../src/common/Application.js"],"names":[],"mappings":"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","file":"Application.js","sourcesContent":["import events from 'events';\nimport Property from 'property-seek';\nimport Module from './Module';\nimport * as util from '../util';\n\n/**\n * Application is the main class of the framework.\n * @param {String} path The path to intialize this Application to. \n *\n * @property {string} path - The path this Application was initialized to.\n * @property {ManagedServer} server - The managed http server.  \n * @property {object} modules - Modules loaded into memory.\n * @property {object} controllers - Controllers loaded into memory.\n * @property {object} models - Models loaded into memory.\n * @property {object} middleware - Middleware loaded into memory.\n * @property {object} pool - A pool of connections the Application has made.\n * @property {object} framework.express - Loaded modules for express\n * @property {object} framework.restify - Loaded modules for restify\n * @property {object} framework.pipes - Loaded modules for the pipes framework\n */\nclass Application {\n\n    constructor(path) {\n\n        this.path = path;\n        this.server = null;\n        this.modules = {};\n        this.controllers = {};\n        this.models = {};\n        this.middleware = {};\n        this.pool = {};\n        this.framework = {\n            pipes: {},\n            run: {},\n            connectors: {},\n            express: {\n                engines: {},\n                middleware: {}\n            },\n            restify: {\n                plugins: {}\n            }\n        };\n        this.events = {\n            ERROR: 'error',\n            STARTED: 'started'\n        };\n        this._events = new events.EventEmitter();\n\n    }\n\n    /**\n     * on \n     */\n    on() {\n        this._events.on.apply(this._events, arguments);\n    }\n\n\n\n    /**\n     * interpolate swaps a list of string for values\n     * from a source.\n     *\n     * Use it to turn for example, a list of controller\n     * strings into an object.\n     * @param {object} source The source to swap from\n     * @param {array|string} list The list or string to interpolate\n     * @returns {object}\n     */\n    interpolate(source, list) {\n\n        var multi = Array.isArray(list);\n        var result;\n        var hit;\n\n        list = (multi) ? list : [list];\n\n        result = list.map(l => {\n\n            hit = Property.get(source, l);\n\n            if (!hit)\n                throw new Error(`Application#interpolate: The source does not\n            contain a member at path  ${l}!`);\n\n            return hit;\n\n        });\n\n        return (multi) ? result : result[0];\n    }\n\n    /**\n     * resolveMiddleware resolves a list of strings into registered middleware.\n     * @param {array<string|function>} list \n     * @returns {array<function>}\n     * @throws Will throw if an unregistered string is encountered.\n     */\n    resolveMiddleware(list) {\n\n        var m;\n\n        return list.map(w => {\n\n            if (typeof w === 'function') return w;\n\n            m = Property.get(this.middleware, w);\n\n            if (!m)\n                throw new Error(`Unknown middleware: '${w}' declared in route file!`);\n\n            return m;\n\n        });\n    }\n\n    /**\n     * resolveAction turns a string into a route action\n     * @param {string} action \n     * @param {string} method \n     * @param {object} definition \n     * @throws Will throw if you specify an unknown controller\n     */\n    resolveAction(action, method, definition) {\n\n        var split;\n        var Controller;\n        var path;\n        var type;\n\n        if (util.isCall(action)) {\n            split = action.slice(0, -2).split('.');\n            method = split.pop();\n        } else {\n            split = action.split('.');\n        }\n\n        path = split.join('.');\n        Controller = Property.get(this.controllers, path);\n        type = (typeof Controller);\n\n        switch (type) {\n\n            case 'function':\n                break;\n\n            case 'object':\n                break;\n\n            default:\n                throw new Error(`Controller '${path}' must be a constructor or instance not` +\n                    ` '${type}'!`);\n\n\n        }\n\n        return function(req, res) {\n\n            var instance;\n\n            if (type === 'function') {\n                instance = new Controller(req, res, definition);\n            } else {\n                instance = Controller;\n                instance.request = req;\n                instance.response = res;\n                instance.route = definition;\n            }\n\n            if (typeof instance[method] !== 'function') {\n                res.status(500);\n                return console.error(`\n                    Unknown method '${method}' in route description\n                    for controller ` +\n                    `\n                    '${path}'!`);\n            }\n\n            instance[method]();\n        };\n\n\n    }\n\n    /**\n     * run this Application\n     * @return {Promise}\n     */\n    run() {\n\n        var loader = this.getLoader();\n        var m = new Module('', '', loader.getConfiguration(), loader, this);\n\n        this.modules.main = m;\n\n        m.modules(this.modules);\n        m.framework(this.framework.connectors, this.framework.pipes);\n        return Promise.all(m.connections(this.framework.connectors, this.pool)).\n        then(() => m.userland(this.controllers, this.models, this.middleware));\n\n    }\n}\n\nexport default Application;\n"]}