{"version":3,"sources":["../../src/common/Converter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAMM,SAAS;AAEA,aAFT,SAAS,CAEC,MAAM,EAAE,WAAW,EAAE;8BAF/B,SAAS;;AAGP,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAClC;;;;;;;;;iBALC,SAAS;;eAaD,oBAAC,KAAK,EAAE;;;AAEd,mBAAO,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,EAAI;;AAElB,oBAAI,OAAO,CAAC,KAAK,UAAU,EAAE,OAAO,CAAC,CAAC;;AAEtC,oBAAI,CAAC,MAAK,MAAM,CAAC,CAAC,CAAC,EACf,MAAM,IAAI,KAAK,4BAAyB,CAAC,gCAA4B,CAAC;;AAE1E,uBAAO,MAAK,MAAM,CAAC,CAAC,CAAC,CAAC;aAEzB,CAAC,CAAC;SACN;;;;;;;;;eAOM,iBAAC,MAAM,EAAE,KAAK,EAAE;;AAEnB,gBAAI,UAAU,CAAC;AACf,gBAAI,MAAM,CAAC;;AAEX,gBAAI,OAAO,MAAM,KAAK,UAAU,EAC5B,OAAO,UAAC,GAAG,EAAE,GAAG;uBAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;aAAA,CAAC;;AAE1C,kBAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3B,sBAAU,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,kBAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEnB,gBAAI,CAAC,UAAU,EACX,MAAM,IAAI,KAAK,4BAAyB,MAAM,CAAC,CAAC,CAAC,iCAA6B,CAAC;;AAEnF,mBAAO,UAAS,GAAG,EAAE,GAAG,EAAE;;AAEtB,oBAAI,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;AACxC,oBAAI,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;AACjC,uBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAChB,2BAAO,GAAG,CAAC,IAAI,CAAC,sBAAmB,MAAM,sDACjC,MAAM,CAAC,CAAC,CAAC,SAAI,CAAC,CAAC;iBAC1B;;AAED,iBAAC,CAAC,MAAM,CAAC,EAAE,CAAC;aACf,CAAC;SAEL;;;WA3DC,SAAS;;;qBA+DA,SAAS","file":"Converter.js","sourcesContent":["/**\n * Converter converts strings into their object counterparts.\n *\n * @param {object} mwares A map of middleware functions.\n * @param {object} controllers A map of controller objects.\n */\nclass Converter {\n\n    constructor(mwares, controllers) {\n        this.mwares = mwares;\n        this.controllers = controllers;\n    }\n\n    /**\n     * middleware turns an array of strings\n     * into an array of executable middleware functions\n     * @param {array} wares \n     * @returns {array<function>}\n     */\n    middleware(wares) {\n\n        return wares.map(w => {\n\n            if (typeof w === 'function') return w;\n\n            if (!this.mwares[w])\n                throw new Error(`Unknown middleware: '${w}' declared in route file!`);\n\n            return this.mwares[w];\n\n        });\n    }\n\n    /**\n     * actions makes an executable of an action decleration\n     * @param {string|function} action\n     * @param {Route} route \n     */\n    actions(action, route) {\n\n        var Controller;\n        var method;\n\n        if (typeof action === 'function')\n            return (req, res) => action(req, res);\n\n        action = action.split('.');\n        Controller = this.controllers[action[0]];\n        method = action[1];\n\n        if (!Controller) \n            throw new Error(`Unknown controller: '${action[0]}' decleared in route file!`);\n\n        return function(req, res) {\n\n            var i = new Controller(req, res, route);\n            if (typeof i[method] !== 'function') {\n                res.status(500);\n                return res.send(`Unknown method '${method}' in route description for controller` +\n                    `'${action[0]}'!`);\n            }\n\n            i[method]();\n        };\n\n    }\n\n}\n\nexport default Converter;\n"]}