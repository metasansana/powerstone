{"version":3,"sources":["../../src/common/Loader.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAoB,UAAU;;;;yBACZ,WAAW;;;;kBACd,IAAI;;;;oBACF,MAAM;;;;;;wBAEF,UAAU;;;;6BACL,iBAAiB;;;;;;;;IAKrC,MAAM;;;;;;AAKG,aALT,MAAM,CAKI,IAAI,EAAE;8BALhB,MAAM;;AAMJ,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;;;;;;;iBAPC,MAAM;;eAaA,oBAAG;AACP,mBAAO,kBAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;;;;;;;;;eAOG,cAAC,KAAK,EAAE;AACR,mBAAO,kBAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACtC;;;;;;;;;;eAQG,cAAC,IAAI,EAAE,QAAQ,EAAE;;AAEjB,gBAAI;AACA,uBAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aACnC,CAAC,OAAO,CAAC,EAAE;AACR,oBAAI,AAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,IAAM,CAAC,QAAQ,AAAC,EAAE,MAAM,CAAC,CAAC;AAC5D,uBAAO,QAAQ,CAAC;aACnB;SAEJ;;;;;;;;;;;;;;;;;;;;;WASM,UAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE;;AAExB,gBAAI,KAAK,CAAC;AACV,gBAAI,UAAU,GAAG,UAAU,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;AAEhD,eAAG,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5B,iBAAK,GAAG,KAAK,IAAI,EAAE,CAAC;;AAEpB,kBAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,kBAAM,GAAG,AAAC,MAAM,GAAI,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;;AAE1C,gBAAI;AACA,qBAAK,GAAG,gBAAG,WAAW,CAAC,GAAG,CAAC,CAAC;aAC/B,CAAC,OAAO,CAAC,EAAE;AACR,uBAAO,KAAK,IAAI,EAAE,CAAC;aACtB;;AAED,gBAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EACpB,KAAK,CAAC,OAAO,CAAC,UAAC,UAAU,EAAK;AAC1B,oBAAI,UAAU,CAAC,OAAO,CAAC,kBAAK,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,EAAE,OAAO;AAC7D,qBAAK,CAAC,MAAM,GAAG,kBAAK,QAAQ,CAAC,UAAU,EAAE,kBAAK,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,GAC/D,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;aACvC,CAAC,CAAC;;AAEP,mBAAO,KAAK,CAAC;SAChB;;;WA3EC,MAAM;;;qBA8EG,MAAM","file":"Loader.js","sourcesContent":["import Promise from 'bluebird';\nimport merge from 'deepmerge';\nimport fs from 'fs';\nimport path from 'path';\nimport Path from 'path';\nimport traverse from 'traverse';\nimport Configuration from './Configuration';\n\n/**\n * Loader\n */\nclass Loader {\n\n    /**\n     * @param {String} path The path where all requires will be relative to.\n     */\n    constructor(path) {\n        this.path = path;\n    }\n\n    /**\n     * basename returns the basename of this Loaders's path\n     * @returns {string}\n     */\n    basename() {\n        return Path.basename(this.path);\n    }\n\n    /**\n     * join a value to the Loader's Path.\n     * @param {string} value \n     * @returns {string}\n     */\n    join(value) {\n        return Path.join(this.path, value);\n    }\n\n    /**\n     * load requires a single file into memory\n     * @param {string} path \n     * @param {*} defaults \n     * @returns {*}\n     */\n    load(path, defaults) {\n\n        try {\n            return require(this.join(path));\n        } catch (e) {\n            if ((e.code !== 'MODULE_NOT_FOUND') || (!defaults)) throw e;\n            return defaults;\n        }\n\n    }\n\n    /**\n     * require requires all files in a sub-directory into a single object\n     * @param {String} dir A name of a sub-directory in the current path.\n     * @param {Object} merge An optional object functions can be merged into.\n     * @param {String} [prefix] A prefix that will be concatenated to the object's keys\n     * @returns {Object}\n     */\n    require(dir, merge, prefix) {\n\n        var files;\n        var extensions = extensions || ['.js', '.json'];\n\n        dir = this.path + '/' + dir;\n        merge = merge || {};\n\n        prefix = prefix || '';\n        prefix = (prefix) ? prefix + '.' : prefix;\n\n        try {\n            files = fs.readdirSync(dir);\n        } catch (e) {\n            return merge || {};\n        }\n\n        if (Array.isArray(files))\n            files.forEach((pathToFile) => {\n                if (extensions.indexOf(Path.extname(pathToFile)) < 0) return;\n                merge[prefix + Path.basename(pathToFile, Path.extname(pathToFile))] =\n                    require(dir + '/' + pathToFile);\n            });\n\n        return merge;\n    }\n}\n\nexport default Loader\n"]}