{"version":3,"sources":["../../src/common/Loader.js"],"names":[],"mappings":"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","file":"Loader.js","sourcesContent":["import Promise from 'bluebird';\nimport merge from 'deepmerge';\nimport fs from 'fs';\nimport path from 'path';\nimport traverse from 'traverse';\nimport Configuration from './Configuration';\n\n/**\n * Loader\n */\nclass Loader {\n\n    /**\n     *\n     * @param {String} parent The parent parent all load operations will operate from.\n     */\n    constructor(parent) {\n        this.parent = parent;\n        this.conf = parent + '/conf';\n    }\n\n    _parentize(dir) {\n        return this.parent + '/' + dir;\n    }\n\n    getConfiguration() {\n        return new Configuration(require(this.conf + '/config'));\n    }\n\n    getDirName() {\n        return path.basename(this.parent);\n    }\n\n    getPath() {\n        return this.parent;\n    }\n\n    /**\n     * loadFromConf\n     */\n    loadFromConf(file, defaults) {\n\n\n        var ret;\n        try {\n            ret = require(this.conf + '/' + file);\n        } catch (e) {\n\n            try {\n                ret = require(this.conf + '/../' + file)\n            } catch (e) {\n                if (defaults) return defaults;\n                throw e;\n            }\n        }\n\n        var wd = path.dirname(this.conf + '/' + file) + '/';\n\n        if ((!ret) && defaults) ret = defaults;\n\n        traverse(ret).\n        forEach(function(value) {\n            if (this.key === '$ref')\n                this.parent.update(require(wd + value));\n        });\n\n        return ret;\n    }\n\n    /**\n     * loadFromConfWithDefaults\n     */\n    loadFromConfWithDefaults(file, defaults) {\n        return merge(defaults, this.loadFromConf(file));\n    }\n\n    requireRelative(path) {\n            return require(this.parent + '/' + path);\n        }\n        /**\n         * requireDirSync requires all files in a sub-directory into a single object\n         * @param {String} dir A name of a sub-directory in the current parent.\n         * @param {Object} merge An optional object functions can be merged into.\n         * @param {String} [prefix] A prefix that will be concatenated to the object's keys\n         * @returns {Object}\n         */\n    requireDirSync(dir, merge, prefix) {\n\n        var files;\n        var extensions = extensions || ['.js', '.json'];\n\n        dir = this._parentize(dir);\n        merge = merge || {};\n\n        prefix = prefix || '';\n\n        try {\n            files = fs.readdirSync(dir);\n        } catch (e) {\n            return merge || {};\n        }\n\n        if (Array.isArray(files))\n            files.forEach(function(pathToFile) {\n                if (extensions.indexOf(path.extname(pathToFile)) < 0) return;\n                merge[prefix + path.basename(pathToFile, path.extname(pathToFile))] =\n                    require(dir + '/' + pathToFile);\n            });\n\n        return merge;\n    }\n\n    /**\n     * requireTasks grabs all the tasks in the tasks folder\n     * @param {Object} [merge]\n     * @param {String} prefix\n     * @returns {Object}\n     */\n    requireTasks(merge, prefix) {\n        return this.requireDirSync('tasks', merge, prefix);\n    }\n\n    /**\n     * requireModels grabs all the models in the models folder\n     * @param {Object} [merge]\n     * @param {String} prefix\n     * @returns {Object}\n     */\n    requireModels(merge, prefix) {\n        return this.requireDirSync('models', merge, prefix);\n    }\n\n    /**\n     * requireControllers grabs all the controllers in the controllers folder\n     * @param {Object} [merge]\n     * @param {String} prefix\n     * @returns {Object}\n     */\n    requireControllers(merge, prefix) {\n        return this.requireDirSync('controllers', merge, prefix);\n    }\n\n    /**\n     * requireQueries grabs all the queries in the queries folder\n     * @param {Object} [merge]\n     * @returns {Object}\n     */\n    requireQueries(merge, prefix) {\n        return this.requireDirSync('queries', merge, prefix);\n    }\n\n    /**\n     * requireMiddleware grabs all the middleware in the middlewares folder\n     * @param {Object} [merge]\n     * @param {String} prefix\n     * @returns {Object}\n     */\n    requireMiddleWare(merge, prefix) {\n        return this.requireDirSync('middleware', merge, prefix);\n    }\n\n    /**\n     * requirePipes grabs up all the pipe definitions in the pipes folder\n     * @param {Object} [merge]\n     * @returns {Object}\n     */\n    requirePipes(merge, prefix) {\n        return this.requireDirSync('pipes', merge, prefix);\n    }\n\n}\n\nexport default Loader\n"]}