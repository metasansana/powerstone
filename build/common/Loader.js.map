{"version":3,"sources":["../../src/common/Loader.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAoB,UAAU;;;;yBACZ,WAAW;;;;kBACd,IAAI;;;;oBACF,MAAM;;;;4BACF,eAAe;;;;6BACV,iBAAiB;;;;;;;;IAKrC,MAAM;;;;;;AAKG,aALT,MAAM,CAKI,IAAI,EAAE;8BALhB,MAAM;;AAMJ,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;;;;;;;iBAPC,MAAM;;eAaA,oBAAG;AACP,mBAAO,kBAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;;;;;;;;;eAOG,cAAC,KAAK,EAAE;AACR,mBAAO,kBAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACtC;;;;;;;;;;eAQG,cAAC,IAAI,EAAE,QAAQ,EAAE;;AAEjB,gBAAI,KAAK,GAAG,KAAK,CAAC;;AAElB,gBAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEvB,gBAAI;AACA,qBAAK,GAAG,gBAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;aAC3C,CAAC,OAAO,CAAC,EAAE;AACR,oBAAI,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,4BAAyB,IAAI,SAAK,CAAC;AACjE,uBAAO,QAAQ,CAAC;aACnB;;AAED,gBAAI,KAAK,EACL,MAAM,IAAI,KAAK,iBAAc,IAAI,wBAAoB,CAAC;;AAE1D,mBAAO,OAAO,CAAC,IAAI,CAAC,CAAC;SAExB;;;;;;;;;;;;;;;;;;;;;WASM,UAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE;;AAExB,gBAAI,KAAK,CAAC;AACV,gBAAI,UAAU,GAAG,UAAU,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;AAEhD,eAAG,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5B,iBAAK,GAAG,KAAK,IAAI,EAAE,CAAC;;AAEpB,kBAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,kBAAM,GAAG,AAAC,MAAM,GAAI,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;AAC1C,kBAAM,GAAG,AAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAI,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC;AAChE,kBAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;AAEpC,gBAAI;AACA,qBAAK,GAAG,gBAAG,WAAW,CAAC,GAAG,CAAC,CAAC;aAC/B,CAAC,OAAO,CAAC,EAAE;AACR,uBAAO,KAAK,IAAI,EAAE,CAAC;aACtB;;AAED,gBAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EACpB,KAAK,CAAC,OAAO,CAAC,UAAC,UAAU,EAAK;AAC1B,oBAAI,UAAU,CAAC,OAAO,CAAC,kBAAK,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,EAAE,OAAO;;AAE7D,0CAAS,GAAG,CAAC,KAAK,EAAE,MAAM,GAAG,kBAAK,QAAQ,CAAC,UAAU,EAAE,kBAAK,OAAO,CAAC,UAAU,CAAC,CAAC,EAC5E,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;;;;;aAMxC,CAAC,CAAC;;AAEP,mBAAO,KAAK,CAAC;SAChB;;;WA5FC,MAAM;;;qBA+FG,MAAM","file":"Loader.js","sourcesContent":["import Promise from 'bluebird';\nimport merge from 'deepmerge';\nimport fs from 'fs';\nimport Path from 'path';\nimport Property from 'property-seek';\nimport Configuration from './Configuration';\n\n/**\n * Loader\n */\nclass Loader {\n\n    /**\n     * @param {String} path The path where all requires will be relative to.\n     */\n    constructor(path) {\n        this.path = path;\n    }\n\n    /**\n     * basename returns the basename of this Loaders's path\n     * @returns {string}\n     */\n    basename() {\n        return Path.basename(this.path);\n    }\n\n    /**\n     * join a value to the Loader's Path.\n     * @param {string} value \n     * @returns {string}\n     */\n    join(value) {\n        return Path.join(this.path, value);\n    }\n\n    /**\n     * load requires a single file into memory\n     * @param {string} path \n     * @param {*} defaults \n     * @returns {*}\n     */\n    load(path, defaults) {\n\n        var isdir = false;\n\n        path = this.join(path);\n\n        try {\n            isdir = fs.statSync(path).isDirectory();\n        } catch (e) {\n            if (!defaults) throw new Error(`Unable to load path '${path}'!`);\n            return defaults;\n        }\n\n        if (isdir)\n            throw new Error(`The path '${path}' must be a file!`);\n\n        return require(path);\n\n    }\n\n    /**\n     * require requires all files in a sub-directory into a single object\n     * @param {string} dir A name of a sub-directory in the current path.\n     * @param {object} merge An optional object functions can be merged into.\n     * @param {string} [prefix] A prefix that will be concatenated to the object's keys\n     * @returns {Object}\n     */\n    require(dir, merge, prefix) {\n\n        var files;\n        var extensions = extensions || ['.js', '.json'];\n\n        dir = this.path + '/' + dir;\n        merge = merge || {};\n\n        prefix = prefix || '';\n        prefix = (prefix) ? prefix + '.' : prefix;\n        prefix = (prefix[0] === '/') ? prefix.replace('/', '') : prefix;\n        prefix = prefix.replace(/\\//g, '.');\n\n        try {\n            files = fs.readdirSync(dir);\n        } catch (e) {\n            return merge || {};\n        }\n\n        if (Array.isArray(files))\n            files.forEach((pathToFile) => {\n                if (extensions.indexOf(Path.extname(pathToFile)) < 0) return;\n\n                Property.set(merge, prefix + Path.basename(pathToFile, Path.extname(pathToFile)),\n                    require(dir + '/' + pathToFile));\n\n                //Disabled, will remove if using property-seek works\n                //merge[prefix + Path.basename(pathToFile, Path.extname(pathToFile))] =\n                // require(dir + '/' + pathToFile);\n\n            });\n\n        return merge;\n    }\n}\n\nexport default Loader\n"]}