{"version":3,"sources":["../../src/common/ManagedServer.js"],"names":[],"mappings":"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","file":"ManagedServer.js","sourcesContent":["import Promise from 'bluebird';\nimport UnsupportedMethodError from './UnsupportedMethodError';\n\n/**\n * ManagedServer wraps around a Server to add additional features.\n *\n * By wrapping around the server implementation, we gain the ability\n * to shutdown and restart the server when needed. Each time\n * the server is stopped, we destroy all existing socket connections\n * so node does not wait on them to end before calling the close() callback.\n * @implements Server\n */\nclass ManagedServer {\n\n    /**\n     * @param Server server\n     */\n    constructor(port, host, server) {\n        this.port = port;\n        this.host = host;\n        this.server = server;\n        this.connections = {};\n        this.connectionId = 0;\n    }\n\n    _store(socket) {\n\n        var self = this;\n        this.connectionId += 1;\n        socket._serverId = self.connectionId;\n\n        socket.on('close', function () {\n            delete self.connections[this._serverId];\n        });\n\n        self.connections[socket._serverId] = socket;\n\n    }\n\n    /**\n     * flush destroys all current open connections to the server.\n     */\n    flush() {\n\n        var self = this;\n\n        Object.keys(self.connections).forEach(function (socketId) {\n            var socket = self.connections[socketId];\n            if (socket) socket.destroy();\n\n        });\n    }\n\n\n    /**\n     * start this server\n     * @return {Promise}\n     */\n    start() {\n        var self = this;\n        return new Promise(function (resolve) {\n            self.server.on('connection', self._store.bind(self));\n            self.server.on('listening', x=>resolve(self.port, self.host, self));\n            self.server.listen(self.port, self.host);\n        });\n    }\n\n    /**\n     * shutdown this server\n     * @return {Promise}\n     */\n    shutdown() {\n        var self = this;\n        return new Promise(function (resolve) {\n            self.server.close(x=>resolve(self));\n            self.flush();\n        });\n\n    }\n\n    /**\n     * restart this server\n     * @returns {Promise}\n     */\n    restart() {\n        return this.shutdown().then(this.start.bind(this));\n    }\n\n    on(event, fn) {\n        this.server.on(event, fn);\n        return this;\n    }\n\n    listen(port, hostname, callback) {\n        this.server.listen(port, hostname, callback);\n    }\n\n    close(cb) {\n        this.server.close(cb);\n    }\n\n    toFrameworkServer() {\n        return this.server.toFrameWorkServer();\n    }\n\n}\n\nexport default ManagedServer;\n\n\n\n\n\n"]}