{"version":3,"sources":["../../src/common/Router.js"],"names":[],"mappings":";;;;;;;;;;;;qBAAkB,SAAS;;;;yBACL,aAAa;;;;;;;;;;IAM7B,MAAM;AAEG,aAFT,MAAM,CAEI,EAAE,EAAE;8BAFd,MAAM;;AAGJ,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;;;;;;;;;iBAJC,MAAM;;eAYC,mBAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE;;;AAEzB,gBAAI,KAAK,CAAC;AACV,gBAAI,UAAU,CAAC;AACf,gBAAI,OAAO,GAAG,2BAAc,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;;AAE7D,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CACnB,OAAO,CAAC,UAAA,IAAI;uBACR,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;;AAExC,8BAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;AAClC,yBAAK,GAAG,uBAAU,MAAM,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAK,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;AAEnF,wBAAI,OAAO,UAAU,CAAC,KAAK,KAAK,QAAQ,EACpC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CACjC,OAAO,CAAC,UAAA,GAAG;+BACP,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC;qBAAA,CAAC,CAAC;;AAE3E,yBAAK,CAAC,mBAAmB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;;AAEjD,wBAAI,IAAI,KAAK,KAAK,EACd,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;;AAE5D,yBAAK,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACzC,yBAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3C,yBAAK,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACvC,yBAAK,CAAC,IAAI,EAAE,CAAC;iBAEhB,CAAC;aAAA,CAAC,CAAC;SACX;;;WAzCC,MAAM;;;qBA6CG,MAAM","file":"Router.js","sourcesContent":["import Route from './Route';\nimport Converter from './Converter';\n/**\n * Router provides methods for setting up \n * application routing.\n * @param {Framework} fw \n */\nclass Router {\n\n    constructor(fw) {\n        this.framework = fw;\n    }\n\n    /**\n     * configure routing\n     * @param {string} mode \n     * @param {object} routes \n     * @param {Application} app \n     */\n    configure(mode, routes, app) {\n\n        var route;\n        var definition;\n        var convert = new Converter(app.middleware, app.controllers);\n\n        Object.keys(routes).\n        forEach(path =>\n            Object.keys(routes[path]).forEach(method => {\n\n                definition = routes[path][method];\n                route = new Route(method.toLowerCase(), path, this.framework, definition, convert);\n\n                if (typeof definition.pipes === 'object')\n                    Object.keys(definition.pipes).\n                forEach(key =>\n                    route.configurePipes(key, definition.pipes[key], app.framework.pipes));\n\n                route.configureMiddleware(definition.middleware);\n\n                if (mode === 'web')\n                    route.configureView(definition.view, definition.locals);\n\n                route.configureAction(definition.action);\n                route.configureHandler(definition.handler);\n                route.configureOther(mode, definition);\n                route.done();\n\n            }));\n    }\n\n}\n\nexport default Router;\n"]}