{"version":3,"sources":["../../../src/common/conn/AbstractConnection.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAoB,UAAU;;;;;;;;;;;;;;;IAYxB,kBAAkB;AAET,aAFT,kBAAkB,CAER,IAAI,EAAE,OAAO,EAAE;8BAFzB,kBAAkB;;AAGhB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;;;;;;;;;;;iBALC,kBAAkB;;eAeZ,kBAAC,MAAM,EAAE,OAAO,EAAE;AACtB,mBAAO,EAAE,CAAC;SACb;;;;;;;;eAMQ,mBAAC,MAAM,EAAE,OAAO,EAAE;AACvB,mBAAO,EAAE,CAAC;SACb;;;eAGG,gBAAG;AACH,mBAAO,0BAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAChD;;;eAEI,iBAAG;AACJ,mBAAO,0BAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACjD;;;eAEK,kBAAE;AACJ,mBAAO,IAAI,CAAC,UAAU,CAAC;SAC1B;;;WAtCC,kBAAkB;;;qBAyCT,kBAAkB","file":"AbstractConnection.js","sourcesContent":["import Promise from 'bluebird';\n\n/**\n * A connection is an object that needs to open to something remotely on application boot time.\n *\n * This usually is a database or some kind of queue system.\n * @param {String} name\n * @param {Object} options\n * @param {Array} list\n * @implements {Connection}\n * @constructor\n */\nclass AbstractConnection {\n\n    constructor(name, options) {\n        this.name = name;\n        this.options = options;\n    }\n\n    /**\n     * __open__ override this method to preform open/connect logic if the connection does\n     * not support promises by default.\n     *\n     * It is wrapped in a promise for cleaner flow control.\n     * @pararm {Function} resolve\n     * @param {Function} reject\n     */\n    __open__(reject, resolve) {\n        resolve();\n    }\n\n    /**\n     * __close__ override this method to preform close/disconnect logic if the connection does\n     * not support promises by default.\n     */\n    __close__(reject, resolve) {\n        resolve();\n    }\n\n\n    open() {\n        return new Promise(this.__open__.bind(this));\n    }\n\n    close() {\n        return new Promise(this.__close__.bind(this));\n    }\n\n    getRaw(){\n        return this.connection;\n    }\n}\n\nexport default AbstractConnection"]}