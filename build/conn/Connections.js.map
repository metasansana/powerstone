{"version":3,"sources":["../../src/conn/Connections.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAoB,UAAU;;;;oBACb,QAAQ;;;;4BACL,iBAAiB;;;;8CACO,kCAAkC;;;;sCAC3C,0BAA0B;;;;;;;;IAKvD,WAAW;AAEF,aAFT,WAAW,GAEC;8BAFZ,WAAW;;AAGT,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,IAAI,oBAAO,CAAC;KACpB;;iBALC,WAAW;;;;;;;;eAYV,aAAC,IAAI,EAAE,OAAO,EAAE;AACf,gBAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AAC3B,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;eASK,gBAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;;AAExB,gBAAI,IAAI,CAAC;;AAET,gBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAChC,MAAM,gDAAmC,IAAI,CAAC,CAAC;;AAEnD,gBAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACpD,gBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;;AAEvB,mBAAO,IAAI,CAAC;SAEf;;;eAEY,uBAAC,IAAI,EAAE;AAChB,mBAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC1C;;;;;;;;;eAOY,uBAAC,IAAI,EAAE;;AAEhB,gBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAC/B,MAAM,wCAA2B,IAAI,CAAC,CAAC;;AAE3C,mBAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;;;;;;;;eAMG,gBAAG;;;AACH,mBAAO,sBAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,EAAG;AAChD,sBAAK,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;aACzB,CAAC,CAAC,CAAC;SACP;;;;;;;;eAMI,iBAAG;AACJ,mBAAO,sBAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,EAAE;AAChE,uBAAO,UAAU,CAAC,KAAK,EAAE,CAAA;aAC5B,CAAC,CAAC,CAAC;SACP;;;WAzEC,WAAW;;;AA4EjB,IAAI,CAAC,GAAG,IAAI,WAAW,EAAE,CAAC;AAC1B,CAAC,CAAC,GAAG,CAAC,UAAU,4BAAU,CAAC;AAC3B,CAAC,CAAC,GAAG,CAAC,eAAe,4BAAU,CAAC;qBACjB,CAAC","file":"Connections.js","sourcesContent":["import Promise from 'bluebird';\nimport Pool from './Pool';\nimport Factory from './mongo/Factory';\nimport UnsupportedConnectionTypeError from  './UnsupportedConnectionTypeError';\nimport UnknownConnectionError from './UnknownConnectionError';\n\n/**\n * Connections is a registry for connections\n */\nclass Connections {\n\n    constructor() {\n        this.types = {};\n        this.pool = Pool;\n    }\n\n    /**\n     *\n     * @param {String} name\n     * @param {ConnectionFactory} factory\n     */\n    set(name, factory) {\n        this.types[name] = factory;\n        return this;\n    }\n\n    /**\n     * create will return an instance of the desired connection if found.\n     * @param {String} name\n     * @param {String} type\n     * @param {Object} options\n     * @returns {AbstractConnection}\n     */\n    create(name, type, options) {\n\n        var conn;\n\n        if (!this.types.hasOwnProperty(type))\n            throw new UnsupportedConnectionTypeError(type);\n\n        conn = this.types[type].create(name, type, options);\n        this.pool[name] = conn;\n\n        return conn;\n\n    }\n\n    hasConnection(name) {\n        return (this.pool.hasOwnProperty(name))\n    }\n\n    /**\n     * getConnection\n     * @param {String} name\n     * @return {AbstractConnection}\n     */\n    getConnection(name) {\n\n        if (!this.pool.hasOwnProperty(name))\n            throw new UnknownConnectionError(name);\n\n        return this.pool[name];\n    }\n\n    /**\n     * open\n     * @return {Promise}\n     */\n    open() {\n        return Promise.all(Object.keys(this.pool).map(key=> {\n            this.pool[key].open();\n        }));\n    }\n\n    /**\n     * close all the connections\n     * @return {Promise}\n     */\n    close() {\n        return Promise.all(Object.keys(this.pool).map(function (connection) {\n            return connection.close()\n        }));\n    }\n}\n\nvar c = new Connections();\nc.set('mongoose', Factory);\nc.set('connect-mongo', Factory);\nexport default c"]}