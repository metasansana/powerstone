'use strict';

var Promise = require('bluebird');
var UnknownConnectionError = require('./UnknownConnectionError');
var UnsupportedConnectionTypeError = require('./UnsupportedConnectionTypeError');

/**
 * Connections provides a factory for creating supported connections.
 */
function Connections() {

    this.types = {
        'mongoose': require('./Mongoose'),
        'connect-mongo': require('./ConnectMongo')
    };

    this.list = [];
}

/**
 * create will return an instance of the desired connection if found.
 * @param {String} name
 * @param {String} type
 * @param {Object} options
 * @returns {Connection}
 */
Connections.prototype.create = function (name, type, options) {

    if (type in this.types) return new this.types[type](name, options, this.list);

    throw new UnsupportedConnectionTypeError(name);
};

/**
 * hasName
 * @return {Boolean}
 */
Connections.prototype.hasName = function (name) {

    var ret;

    this.list.forEach(function (connection) {
        if (connection.name === name) ret = true;
    });

    return ret;
};
/**
 * getByName returns a connection based on its assigned name.
 * @param {Connection}
 */
Connections.prototype.getByName = function (name) {

    var ret;

    this.list.forEach(function (connection) {

        if (connection.name === name) ret = connection;
    });

    if (!ret) throw new UnknownConnectionError(name);

    return ret;
};

/**
 * open all the connections.
 */
Connections.prototype.open = function () {
    return Promise.all(this.list.map(function (connection) {
        return connection.open();
    }));
};

/**
 * close all the connections
 */
Connections.prototype.close = function () {
    return Promise.all(this.list.map(function (connection) {
        return connection.close();
    }));
};

module.exports = Connections;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25uZWN0aW9ucy9Db25uZWN0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsQyxJQUFJLHNCQUFzQixHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ2pFLElBQUksOEJBQThCLEdBQUcsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Ozs7O0FBS2pGLFNBQVMsV0FBVyxHQUFHOztBQUVuQixRQUFJLENBQUMsS0FBSyxHQUFHO0FBQ1Qsa0JBQVUsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2pDLHVCQUFlLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0tBQzdDLENBQUE7O0FBRUQsUUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7Q0FFbEI7Ozs7Ozs7OztBQVNELFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7O0FBRTFELFFBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQ2xCLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUUxRCxVQUFNLElBQUksOEJBQThCLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FFbEQsQ0FBQzs7Ozs7O0FBTUYsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxJQUFJLEVBQUU7O0FBRTVDLFFBQUksR0FBRyxDQUFDOztBQUVSLFFBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBVSxFQUFFO0FBQ3BDLFlBQUksVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQ3hCLEdBQUcsR0FBRyxJQUFJLENBQUM7S0FDbEIsQ0FBQyxDQUFDOztBQUVILFdBQU8sR0FBRyxDQUFDO0NBQ2QsQ0FBQzs7Ozs7QUFLRixXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLElBQUksRUFBRTs7QUFFOUMsUUFBSSxHQUFHLENBQUM7O0FBRVIsUUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxVQUFVLEVBQUU7O0FBRXBDLFlBQUksVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQ3hCLEdBQUcsR0FBRyxVQUFVLENBQUM7S0FDeEIsQ0FBQyxDQUFBOztBQUVGLFFBQUksQ0FBQyxHQUFHLEVBQ0osTUFBTSxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDOztBQUUzQyxXQUFPLEdBQUcsQ0FBQztDQUVkLENBQUM7Ozs7O0FBS0YsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUNyQyxXQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxVQUFVLEVBQUU7QUFDbkQsZUFBTyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDM0IsQ0FBQyxDQUFDLENBQUM7Q0FDUCxDQUFDOzs7OztBQUtGLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDdEMsV0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsVUFBVSxFQUFFO0FBQ25ELGVBQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQzdCLENBQUMsQ0FBQyxDQUFDO0NBQ1AsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyIsImZpbGUiOiJDb25uZWN0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciBVbmtub3duQ29ubmVjdGlvbkVycm9yID0gcmVxdWlyZSgnLi9Vbmtub3duQ29ubmVjdGlvbkVycm9yJyk7XG52YXIgVW5zdXBwb3J0ZWRDb25uZWN0aW9uVHlwZUVycm9yID0gcmVxdWlyZSgnLi9VbnN1cHBvcnRlZENvbm5lY3Rpb25UeXBlRXJyb3InKTtcblxuLyoqXG4gKiBDb25uZWN0aW9ucyBwcm92aWRlcyBhIGZhY3RvcnkgZm9yIGNyZWF0aW5nIHN1cHBvcnRlZCBjb25uZWN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gQ29ubmVjdGlvbnMoKSB7XG5cbiAgICB0aGlzLnR5cGVzID0ge1xuICAgICAgICAnbW9uZ29vc2UnOiByZXF1aXJlKCcuL01vbmdvb3NlJyksXG4gICAgICAgICdjb25uZWN0LW1vbmdvJzogcmVxdWlyZSgnLi9Db25uZWN0TW9uZ28nKVxuICAgIH1cblxuICAgIHRoaXMubGlzdCA9IFtdO1xuXG59XG5cbi8qKlxuICogY3JlYXRlIHdpbGwgcmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBkZXNpcmVkIGNvbm5lY3Rpb24gaWYgZm91bmQuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Q29ubmVjdGlvbn1cbiAqL1xuQ29ubmVjdGlvbnMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChuYW1lLCB0eXBlLCBvcHRpb25zKSB7XG5cbiAgICBpZiAodHlwZSBpbiB0aGlzLnR5cGVzKVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMudHlwZXNbdHlwZV0obmFtZSwgb3B0aW9ucywgdGhpcy5saXN0KTtcblxuICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZENvbm5lY3Rpb25UeXBlRXJyb3IobmFtZSk7XG5cbn07XG5cbi8qKlxuICogaGFzTmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuQ29ubmVjdGlvbnMucHJvdG90eXBlLmhhc05hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuXG4gICAgdmFyIHJldDtcblxuICAgIHRoaXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgIGlmIChjb25uZWN0aW9uLm5hbWUgPT09IG5hbWUpXG4gICAgICAgICAgICByZXQgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJldDtcbn07XG4vKipcbiAqIGdldEJ5TmFtZSByZXR1cm5zIGEgY29ubmVjdGlvbiBiYXNlZCBvbiBpdHMgYXNzaWduZWQgbmFtZS5cbiAqIEBwYXJhbSB7Q29ubmVjdGlvbn1cbiAqL1xuQ29ubmVjdGlvbnMucHJvdG90eXBlLmdldEJ5TmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cbiAgICB2YXIgcmV0O1xuXG4gICAgdGhpcy5saXN0LmZvckVhY2goZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcblxuICAgICAgICBpZiAoY29ubmVjdGlvbi5uYW1lID09PSBuYW1lKVxuICAgICAgICAgICAgcmV0ID0gY29ubmVjdGlvbjtcbiAgICB9KVxuXG4gICAgaWYgKCFyZXQpXG4gICAgICAgIHRocm93IG5ldyBVbmtub3duQ29ubmVjdGlvbkVycm9yKG5hbWUpO1xuXG4gICAgcmV0dXJuIHJldDtcblxufTtcblxuLyoqXG4gKiBvcGVuIGFsbCB0aGUgY29ubmVjdGlvbnMuXG4gKi9cbkNvbm5lY3Rpb25zLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLmxpc3QubWFwKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uLm9wZW4oKVxuICAgIH0pKTtcbn07XG5cbi8qKlxuICogY2xvc2UgYWxsIHRoZSBjb25uZWN0aW9uc1xuICovXG5Db25uZWN0aW9ucy5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMubGlzdC5tYXAoZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICB9KSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbm5lY3Rpb25zOyJdfQ==