{"version":3,"sources":["../../src/middleware/express.js"],"names":[],"mappings":";;;;;;;;sBAAmB,QAAQ;;;;uBACP,SAAS;;;;+BACF,iBAAiB;;;;uBACzB,QAAQ;;;;0BACH,aAAa;;;;6BACZ,eAAe;;;;8BACpB,iBAAiB;;;;qBACpB,OAAO;;;;0BACA,aAAa;;;;AAErC,IAAM,MAAM,GAAG,oBAAO,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAEtD,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAY,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC7C,OAAG,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;AACzC,OAAG,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;AAC5C,OAAG,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;AACnC,QAAI,EAAE,CAAC;CACV,CAAC;;qBAEa;;AAEX,cAAQ,iBAAS,MAAM,EAAE,MAAM,EAAE;AAC7B,cAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAC3D,OAAO,CAAC,UAAA,IAAI,EAAI;;AAEZ,gBAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EACnB,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,8BAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE5E,kBAAM,CAAC,GAAG,CAAC,8BAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAExD,CAAC,CAAC;KACN;AACH,iBAAa,EAAE,oBAAS,MAAM,EAAE,MAAM,EAAE;AAClC,cAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAE,CAAC,CACtD,OAAO,CAAC,UAAA,IAAI,EAAI;;AAEZ,gBAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EACnB,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,6BAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEzE,kBAAM,CAAC,GAAG,CAAC,6BAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAErD,CAAC,CAAC;KAEN;AACD,qBAAiB,EAAE,wBAAS,MAAM,EAAE,MAAM,EAAE;AACxC,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,kCAAgB,CAAC,CAAC;KAC7C;AACD,UAAM,EAAE,gBAAS,MAAM,EAAE,MAAM,EAAE;;AAE7B,YAAI,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE,OAAO;;AAE1D,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,yBAAO,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,eAAe,EAChF,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;KACvF;AACD,iBAAa,EAAE,oBAAS,MAAM,EAAE,MAAM,EAAE;AACpC,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,wBAAY,IAAI,EAAE,CAAC,CAAC;AAC5C,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,wBAAY,UAAU,CAAC;AAC3C,oBAAQ,EAAE,IAAI;SACjB,CAAC,CAAC,CAAC;KACP;AACD,mBAAe,EAAE,sBAAS,MAAM,EAAE,MAAM,EAAE;AACtC,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,+BAAa,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAC/E,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;KACvC;AACD,WAAO,EAAE,iBAAS,MAAM,EAAE,MAAM,EAAE;;AAE9B,YAAI,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,EAAE;AAC7D,gBAAI,EAAE,WAAW;AACjB,kBAAM,EAAE,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAClD,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC;AACjC,kBAAM,EAAE,KAAK;AACb,6BAAiB,EAAE,IAAI;SAC1B,EAAE,EAAE,CAAC,CAAC;;AAEP,YAAI,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAC/B,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;;AAE1D,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,iCAAQ,aAAa,CAAC,CAAC,CAAC;KAEnD;AACD,QAAI,EAAE,cAAS,MAAM,EAAE,MAAM,EAAE;;AAE3B,YAAI,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACnC,kBAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,yBAAM,CAAC,CAAC;AAChC,kBAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;SAC5C;KAEJ;CACJ","file":"express.js","sourcesContent":["import crypto from 'crypto';\nimport express from 'express';\nimport methodOverride from 'method-override';\nimport morgan from 'morgan';\nimport body_parser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport csrf from 'csurf';\nimport serve_index from 'serve-index';\n\nconst SECRET = crypto.randomBytes(32).toString('hex');\n\nconst send_csrf_token = function(req, res, next) {\n    res.set('x-csrf-token', req.csrfToken());\n    res.cookie('x-csrf-token', req.csrfToken());\n    res.locals._csrf = req.csrfToken();\n    next();\n};\n\nexport default {\n\n    public: function(router, module) {\n        module.configuration.readWithDefaults('public', ['public']).\n        forEach(path => {\n\n            if (Array.isArray(path))\n                return router.use(path[0], express.static(module.loader.join(path[1])));\n\n            router.use(express.static(module.loader.join(path)));\n\n        });\n    },\n  'serve-index': function(router, module) {\n        module.configuration.readWithDefaults('directory', []).\n        forEach(path => {\n\n            if (Array.isArray(path))\n                return router.use(path[0], serve_index(module.loader.join(path[1])));\n\n            router.use(serve_index(module.loader.join(path)));\n\n        });\n\n    },\n    'method-override': function(router, module) {\n        router.use(module.path, methodOverride());\n    },\n    morgan: function(router, module) {\n\n        if (module.configuration.read('morgan') === false) return;\n\n        router.use(module.path, morgan(module.configuration.readWithDefaults('morgan.format',\n            process.env.LOG_FORMAT || 'dev', module.configuration.read('morgan.options'))));\n    },\n    'body-parser': function(router, module) {\n        router.use(module.path, body_parser.json());\n        router.use(module.path, body_parser.urlencoded({\n            extended: true\n        }));\n    },\n    'cookie-parser': function(router, module) {\n        router.use(module.path, cookieParser(module.configuration.readWithDefaults('secret',\n            process.env.SECRET || SECRET)));\n    },\n    session: function(router, module) {\n\n        var sessionConfig = module.configuration.readAndMerge('session', {\n            name: 'PHPSESSID',\n            secret: module.configuration.readWithDefaults('secret',\n                process.env.SECRET || SECRET),\n            resave: false,\n            saveUninitialized: true\n        }, {});\n\n        if (module.application.pool.session)\n            sessionConfig.store = module.application.pool.session;\n\n        router.use(module.path, session(sessionConfig));\n\n    },\n    csrf: function(router, module) {\n\n        if (module.configuration.read('csrf')) {\n            router.use(module.path, csrf());\n            router.use(module.path, send_csrf_token);\n        }\n\n    }\n};\n"]}