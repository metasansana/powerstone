{"version":3,"sources":["../../src/rest/Plugins.js"],"names":[],"mappings":";;;;;;;;;;;;uBAAoB,SAAS;;;;;;;;;IAMtB,OAAO;AAED,WAFN,OAAO,GAEE;0BAFT,OAAO;;AAGV,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;GACnB;;eAJI,OAAO;;;;;;;;;;;;;;WAiBR,aAAC,IAAI,EAAE,QAAQ,EAAE;AACnB,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;AAC9B,aAAO,IAAI,CAAC;KACb;;;;;;;;WAMG,aAAC,IAAI,EAAE;AACT,UAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EACpC,MAAM,IAAI,KAAK,CAAC,0BAA0B,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;AAC5D,aAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC3B;;;SA9BI,OAAO;;;qBAiCC,IAAI,OAAO,EAAE","file":"Plugins.js","sourcesContent":["import restify from 'restify';\n\n/**\n * Plugins is a store for plugins that you can use with restify.\n *\n */\n class Plugins {\n\n  constructor() {\n    this.plugins = {};\n  }\n\n  /**\n   * @callback provider\n   * @param {restify.Server} server\n   * @param {Configuration} config\n   * @param {Loader} loader\n   * @param {Project} project\n   *\n   * set a provider\n   * @param {string} name\n   * @param {function} provider\n   */\n   set(name, provider) {\n    this.plugins[name] = provider;\n    return this;\n  }\n\n  /**\n   * get returns a previously stored provider\n   * @param  {string} name\n   */\n   get(name) {\n    if (!this.plugins.hasOwnProperty(name))\n      throw new Error('Unknown restify plugin \"' + name + '\"!');\n    return this.plugins[name];\n  }\n}\n\nexport default new Plugins()\n"]}