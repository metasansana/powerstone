{"version":3,"sources":["../../../src/routing/pipe-transform/PipeController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;iCAAiB,qBAAqB;;;;4BACjB,eAAe;;;;yBACjB,kBAAkB;;;;6BACd,sBAAsB;;;;IAEvC,cAAc;cAAd,cAAc;;aAAd,cAAc;8BAAd,cAAc;;mCAAd,cAAc;;;iBAAd,cAAc;;;;;;;;;eAQV,gBAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE;;;AAE3B,gBAAI,CAAC,CAAC;AACN,gBAAI,IAAI,CAAC;AACT,gBAAI,IAAI,CAAC;AACT,gBAAI,SAAS,CAAC;;AAEd,qBAAS,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;AAEnC,gBAAI,GAAG,AAAC,OAAO,SAAS,KAAK,QAAQ,GAAI,SAAS,GAC9C,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;AAEhD,gBAAI,CAAC,IAAI,EACL,MAAM,IAAI,KAAK,CAAC,8BAA2B,SAAS,0CACrB,IAAI,SAAI,CAAC,CAAC;;AAE7C,aAAC,GAAG,mCAAS,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;;AAErD,aAAC,CAAC,GAAG,CAAC,0BAAS,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,UAAC,GAAG,EAAE,CAAC,EAAK;;AAEhD,oBAAI,GAAG,EACH,OAAO,uBAAO,IAAI,CAAC,YAAY,EAAE,GAAG,EAChC,MAAK,OAAO,EAAE,MAAK,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAE3C,0CAAS,GAAG,CAAC,MAAK,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACpC,oBAAI,EAAE,CAAC;aAEV,EAAE,IAAI,CAAC,CAAC;SACZ;;;WApCC,cAAc;;;qBAwCL,cAAc","file":"PipeController.js","sourcesContent":["import Pipe from 'pipe-transform/Pipe';\nimport Property from 'property-seek';\nimport events from '../../usr/events';\nimport Controller from '../../mvc/Controller';\n\nclass PipeController extends Controller {\n\n    /**\n     * filter applies the filters of a pipe associated with this controller\n     * @param {string} prop \n     * @param {object} definition \n     * @param {function} next Called only if the filter is successful\n     */\n    filter(prop, definition, next) {\n\n        var p;\n        var spec;\n        var pipe;\n        var selection;\n\n        selection = definition.pipes[prop];\n\n        spec = (typeof selection === 'object') ? selection :\n            this.app.framework.pipes.defines[selection];\n\n        if (!spec)\n            throw new Error(`Unknown pipe selection '${selection}' ` +\n                `decleared for property '${prop}'!`);\n\n        p = new Pipe(spec, this.app.framework.pipes.filters);\n\n        p.run(Property.get(this.request, prop), (err, o) => {\n\n            if (err)\n                return events.emit('pipe-error', err,\n                    this.request, this.response, next);\n\n            Property.set(this.request, prop, o);\n            next();\n\n        }, this);\n    }\n\n}\n\nexport default PipeController\n"]}