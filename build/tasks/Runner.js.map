{"version":3,"sources":["../../src/tasks/Runner.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAoB,UAAU;;;;sBACX,UAAU;;;;;;;;;IAMvB,MAAM;AAEG,aAFT,MAAM,CAEI,KAAK,EAAE,QAAQ,EAAC;8BAF1B,MAAM;;AAGJ,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAClB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;iBANC,MAAM;;eAQC,mBAAC,EAAE,EAAE;;AAEV,gBAAI,IAAI,GAAG,IAAI,CAAC;AAChB,gBAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AAC5B,gBAAI,MAAM,GAAG,wBAAW,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAEvC,gBAAI,KAAK,GAAG,SAAR,KAAK,CAAY,GAAG,EAAC;AACrB,oBAAI,GAAG,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;AACxB,oBAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;aACtB,CAAC;;AAEF,gBAAI,KAAK,GAAG,SAAR,KAAK,GAAc;AACnB,oBAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAC3B,CAAC;;AAEF,gBAAI,IAAI,GAAG,SAAP,IAAI,GAAc;AAClB,oBAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;aACtB,CAAC;;AAEF,gBAAG,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC;;AAEtB,gBAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;SAEzC;;;;;;;;;;eAQU,qBAAC,KAAK,EAAE;;AAEf,iBAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;AAC5B,gBAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;;AAE3B,mBAAO,0BAAY,CAAA,UAAS,OAAO,EAAE,MAAM,EAAE;;AAEzC,oBAAI,CAAC,SAAS,CAAC,UAAS,GAAG,EAAE;;AAEzB,wBAAG,GAAG,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;;AAE3B,2BAAO,EAAE,CAAC;iBAEb,CAAC,CAAA;aAEL,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACjB;;;WAvDC,MAAM;;;qBA2DG,MAAM","file":"Runner.js","sourcesContent":["import Promise from 'bluebird';\nimport Report from './Report';\n\n/**\n * Runner is responsible for running tasks before the application\n * starts accepting client requests.\n */\nclass Runner {\n\n    constructor(tasks, recorder){\n        this.tasks = tasks;\n        this.queue = null;\n        this.recorder = recorder;\n    }\n\n    _nextTask(cb) {\n\n        var self = this;\n        var next = self.queue.pop();\n        var report = new Report(self.recorder);\n\n        var ifErr = function(err){\n            if (err) return cb(err);\n            self._nextTask(cb);\n        };\n\n        var onYes = function() {\n            next.run(report, ifErr);\n        };\n\n        var onNo = function() {\n            self._nextTask(cb);\n        };\n\n        if(!next) return cb();\n\n        next.taskWillRun(onYes, onNo, report);\n\n    }\n\n    /**\n     * runAllTasks will run all the tasks in sequence.\n     * @param {Array} [tasks] Optional list of tasks instead of the\n     * ones this object was created with.\n     * @return {Promise}\n     */\n    runAllTasks(tasks) {\n\n        tasks = tasks || this.tasks;\n        this.queue = tasks.slice();\n\n        return new Promise(function(resolve, reject) {\n\n            this._nextTask(function(err) {\n\n                if(err) return reject(err);\n\n                resolve();\n\n            })\n\n        }.bind(this));\n    }\n\n}\n\nexport default Runner"]}