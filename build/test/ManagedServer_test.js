'use strict';

var must = require('must');
var supertest = require('supertest');
var express = require('express');
var http = require('http');
var ManagedServer = require('../ManagedServer');

var server;
var app;
var request;
var impl;
var DO_NOT_CLOSE = false;

describe('ManagedServer', function () {

    beforeEach(function (done) {

        app = express();

        app.get('/', function (req, res) {
            res.status(204).send();
        });

        impl = {

            server: http.createServer(app),

            listen: function listen() {
                this.server.listen(7777);
            },

            on: function on() {
                this.server.on.apply(this.server, arguments);
            },

            close: function close(cb) {
                this.server.close(cb);
            }
        };

        request = supertest(app);
        server = new ManagedServer(impl);
        done();
    });

    afterEach(function (done) {
        if (DO_NOT_CLOSE) return done();
        return impl.server.close(done);
    });

    afterEach(function () {
        DO_NOT_CLOSE = false;
    });

    it('must be able to start', function (done) {
        server.start().then(function () {
            request.get('/').expect(204).end(done);
        });
    });

    it('must be able to restart', function (done) {

        server.start().then(function (server) {
            return server.restart();
        }).then(function () {
            request.get('/').expect(204).end(done);
        })['catch'](done);
    });

    it('must be able to be shutdown', function (done) {

        DO_NOT_CLOSE = true;

        return server.start().then(function (server) {
            return server.shutdown();
        }).then(function () {
            request.get('/').end(function (err) {
                must(true).be['true']();
                done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L01hbmFnZWRTZXJ2ZXJfdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDckMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7QUFFaEQsSUFBSSxNQUFNLENBQUM7QUFDWCxJQUFJLEdBQUcsQ0FBQztBQUNSLElBQUksT0FBTyxDQUFDO0FBQ1osSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBWTs7QUFFbEMsY0FBVSxDQUFDLFVBQVUsSUFBSSxFQUFFOztBQUV2QixXQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7O0FBRWhCLFdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUM3QixlQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzFCLENBQUMsQ0FBQzs7QUFFSCxZQUFJLEdBQUc7O0FBRUgsa0JBQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQzs7QUFFOUIsa0JBQU0sRUFBRSxrQkFBWTtBQUNoQixvQkFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDNUI7O0FBRUQsY0FBRSxFQUFFLGNBQVk7QUFDWixvQkFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDaEQ7O0FBRUQsaUJBQUssRUFBRSxlQUFVLEVBQUUsRUFBRTtBQUNqQixvQkFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDekI7U0FDSixDQUFDOztBQUVGLGVBQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekIsY0FBTSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFlBQUksRUFBRSxDQUFDO0tBRVYsQ0FBQyxDQUFDOztBQUVILGFBQVMsQ0FBQyxVQUFVLElBQUksRUFBRTtBQUN0QixZQUFJLFlBQVksRUFBRSxPQUFPLElBQUksRUFBRSxDQUFDO0FBQ2hDLGVBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbEMsQ0FBQyxDQUFDOztBQUVILGFBQVMsQ0FBQyxZQUFVO0FBQ2hCLG9CQUFZLEdBQUcsS0FBSyxDQUFDO0tBQ3hCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxJQUFJLEVBQUU7QUFDeEMsY0FBTSxDQUFDLEtBQUssRUFBRSxDQUNWLElBQUksQ0FBQyxZQUFZO0FBQ2IsbUJBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQ1osTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUNYLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQixDQUFDLENBQUM7S0FDVixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHlCQUF5QixFQUFFLFVBQVUsSUFBSSxFQUFFOztBQUUxQyxjQUFNLENBQUMsS0FBSyxFQUFFLENBQ1YsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQ25CLG1CQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUMzQixDQUFDLENBQ0YsSUFBSSxDQUFDLFlBQVk7QUFDYixtQkFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQ1gsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCLENBQUMsU0FDRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBRW5CLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsNkJBQTZCLEVBQUUsVUFBVSxJQUFJLEVBQUU7O0FBRTlDLG9CQUFZLEdBQUcsSUFBSSxDQUFDOztBQUVwQixlQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FDakIsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQ25CLG1CQUFPLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM1QixDQUFDLENBQ0YsSUFBSSxDQUFDLFlBQVk7QUFDYixtQkFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FDWixHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUU7QUFDZixvQkFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsUUFBSyxFQUFFLENBQUM7QUFDckIsb0JBQUksRUFBRSxDQUFDO2FBQ1YsQ0FBQyxDQUFDO1NBQ1YsQ0FBQyxDQUFBO0tBQ1QsQ0FBQyxDQUFBO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6Ik1hbmFnZWRTZXJ2ZXJfdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtdXN0ID0gcmVxdWlyZSgnbXVzdCcpO1xudmFyIHN1cGVydGVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpO1xudmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBNYW5hZ2VkU2VydmVyID0gcmVxdWlyZSgnLi4vTWFuYWdlZFNlcnZlcicpO1xuXG52YXIgc2VydmVyO1xudmFyIGFwcDtcbnZhciByZXF1ZXN0O1xudmFyIGltcGw7XG52YXIgRE9fTk9UX0NMT1NFID0gZmFsc2U7XG5cbmRlc2NyaWJlKCdNYW5hZ2VkU2VydmVyJywgZnVuY3Rpb24gKCkge1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoZG9uZSkge1xuXG4gICAgICAgIGFwcCA9IGV4cHJlc3MoKTtcblxuICAgICAgICBhcHAuZ2V0KCcvJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwNCkuc2VuZCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpbXBsID0ge1xuXG4gICAgICAgICAgICBzZXJ2ZXI6IGh0dHAuY3JlYXRlU2VydmVyKGFwcCksXG5cbiAgICAgICAgICAgIGxpc3RlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbig3Nzc3KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIub24uYXBwbHkodGhpcy5zZXJ2ZXIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJlcXVlc3QgPSBzdXBlcnRlc3QoYXBwKTtcbiAgICAgICAgc2VydmVyID0gbmV3IE1hbmFnZWRTZXJ2ZXIoaW1wbCk7XG4gICAgICAgIGRvbmUoKTtcblxuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGlmIChET19OT1RfQ0xPU0UpIHJldHVybiBkb25lKCk7XG4gICAgICAgIHJldHVybiBpbXBsLnNlcnZlci5jbG9zZShkb25lKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChmdW5jdGlvbigpe1xuICAgICAgICBET19OT1RfQ0xPU0UgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIGl0KCdtdXN0IGJlIGFibGUgdG8gc3RhcnQnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBzZXJ2ZXIuc3RhcnQoKS5cbiAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuZ2V0KCcvJykuXG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgyMDQpLlxuICAgICAgICAgICAgICAgICAgICBlbmQoZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdtdXN0IGJlIGFibGUgdG8gcmVzdGFydCcsIGZ1bmN0aW9uIChkb25lKSB7XG5cbiAgICAgICAgc2VydmVyLnN0YXJ0KCkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmVyLnJlc3RhcnQoKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgdGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5nZXQoJy8nKS5cbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KDIwNCkuXG4gICAgICAgICAgICAgICAgICAgIGVuZChkb25lKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgY2F0Y2goZG9uZSk7XG5cbiAgICB9KTtcblxuICAgIGl0KCdtdXN0IGJlIGFibGUgdG8gYmUgc2h1dGRvd24nLCBmdW5jdGlvbiAoZG9uZSkge1xuXG4gICAgICAgIERPX05PVF9DTE9TRSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHNlcnZlci5zdGFydCgpLlxuICAgICAgICAgICAgdGhlbihmdW5jdGlvbiAoc2VydmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlci5zaHV0ZG93bigpO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmdldCgnLycpLlxuICAgICAgICAgICAgICAgICAgICBlbmQoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXVzdCh0cnVlKS5iZS50cnVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICB9KVxufSk7XG4iXX0=