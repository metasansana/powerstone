'use strict';

var validator = require('express-jsonschema').validate;

var onValidatorError = function onValidatorError(err, req, res, next) {

    if (err.name === 'JsonSchemaValidation') {

        res.status(400);

        var responseData = {
            message: 'Errors occurred during ' + req.method + ' request to ' + req.url + '.',
            errors: err.validations
        };

        if (req.xhr || req.get('Content-Type') === 'application/json') {
            res.json(responseData);
        } else {
            console.log(err.stack);
            res.send();
        }
    } else {
        next(err);
    }
};

/**
 * RoutingFramework is used to setup the express Router
 * @param {Router} router
 * @param {StringConversion}
 * @constructor
 */
function RoutingFramework(router, converter) {
    this.router = router;
    this.converter = converter;
}

/**
 * configureSchema
 */
RoutingFramework.prototype.configureSchema = function (route) {

    if (route.schema) {
        this.router[route.method].call(this.router, route.href, validator(route.schema));
        this.router.use(onValidatorError);
    }

    return this;
};

/**
 * configureMiddleWare
 */
RoutingFramework.prototype.configureMiddleWare = function (route, middleware) {

    if (route.middleware) {

        var args = this.converter.funcListToArray(route.middleware, middleware);
        args.unshift(route.href);
        this.router[route.method].apply(this.router, args);
    }

    return this;
};

/**
 * configureQueries
 */
RoutingFramework.prototype.configureQueries = function (route, models, queries) {

    if (route.query) {
        this.router[route.method](route.href, function (req, res, next) {
            queries[route.query.script](models[route.query.model], req, res, next, route.query);
        });
    }

    return this;
};

/**
 * configureControllers
 */
RoutingFramework.prototype.configureControllers = function (route, controllers) {

    if (route.controller) {

        var args = this.converter.methodListToBoundFunctionArray(route.controller, controllers);
        args.unshift(route.href);
        this.router[route.method].apply(this.router, args);
    }
    return this;
};

/**
 * toRouter
 */
RoutingFramework.prototype.toRouter = function () {
    return this.router;
};

module.exports = RoutingFramework;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWIvUm91dGluZ0ZyYW1ld29yay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7QUFFdkQsSUFBSSxnQkFBZ0IsR0FBRyxTQUFuQixnQkFBZ0IsQ0FBYSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7O0FBRWxELFFBQUksR0FBRyxDQUFDLElBQUksS0FBSyxzQkFBc0IsRUFBRTs7QUFFckMsV0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFaEIsWUFBSSxZQUFZLEdBQUc7QUFDZixtQkFBTyxFQUFDLHlCQUF5QixHQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUMsY0FBYyxHQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUUsR0FBRztBQUN4RSxrQkFBTSxFQUFFLEdBQUcsQ0FBQyxXQUFXO1NBQzFCLENBQUM7O0FBRUYsWUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssa0JBQWtCLEVBQUU7QUFDM0QsZUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMxQixNQUFNO0FBQ0gsbUJBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZCLGVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNkO0tBRUosTUFBTTtBQUNILFlBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNiO0NBR0osQ0FBQzs7Ozs7Ozs7QUFRRixTQUFTLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7QUFDekMsUUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsUUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Q0FDOUI7Ozs7O0FBS0QsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxVQUFVLEtBQUssRUFBRTs7QUFFMUQsUUFBRyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ2IsWUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDakYsWUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUVyQzs7QUFFRCxXQUFPLElBQUksQ0FBQztDQUNmLENBQUM7Ozs7O0FBS0YsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFVBQVUsS0FBSyxFQUFFLFVBQVUsRUFBRTs7QUFFMUUsUUFBRyxLQUFLLENBQUMsVUFBVSxFQUFFOztBQUVqQixZQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hFLFlBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBRXREOztBQUVELFdBQU8sSUFBSSxDQUFDO0NBQ2YsQ0FBQzs7Ozs7QUFLRixnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTs7QUFFNUUsUUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ2IsWUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQzVELG1CQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEYsQ0FBQyxDQUFDO0tBQ047O0FBRUQsV0FBTyxJQUFJLENBQUM7Q0FDZixDQUFDOzs7OztBQUtGLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxVQUFVLEtBQUssRUFBRSxXQUFXLEVBQUU7O0FBRTVFLFFBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTs7QUFFbEIsWUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3hGLFlBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBRXREO0FBQ0QsV0FBTyxJQUFJLENBQUM7Q0FDZixDQUFDOzs7OztBQUtGLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBWTtBQUNoRCxXQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7Q0FDcEIsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDIiwiZmlsZSI6IlJvdXRpbmdGcmFtZXdvcmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCdleHByZXNzLWpzb25zY2hlbWEnKS52YWxpZGF0ZTtcblxudmFyIG9uVmFsaWRhdG9yRXJyb3IgPSBmdW5jdGlvbiAoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuXG4gICAgaWYgKGVyci5uYW1lID09PSAnSnNvblNjaGVtYVZhbGlkYXRpb24nKSB7XG5cbiAgICAgICAgcmVzLnN0YXR1cyg0MDApO1xuXG4gICAgICAgIHZhciByZXNwb25zZURhdGEgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOidFcnJvcnMgb2NjdXJyZWQgZHVyaW5nICcrcmVxLm1ldGhvZCsnIHJlcXVlc3QgdG8gJytyZXEudXJsICsnLicsXG4gICAgICAgICAgICBlcnJvcnM6IGVyci52YWxpZGF0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChyZXEueGhyIHx8IHJlcS5nZXQoJ0NvbnRlbnQtVHlwZScpID09PSAnYXBwbGljYXRpb24vanNvbicpIHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3BvbnNlRGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xuICAgICAgICAgICAgcmVzLnNlbmQoKTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dChlcnIpO1xuICAgIH1cblxuXG59O1xuXG4vKipcbiAqIFJvdXRpbmdGcmFtZXdvcmsgaXMgdXNlZCB0byBzZXR1cCB0aGUgZXhwcmVzcyBSb3V0ZXJcbiAqIEBwYXJhbSB7Um91dGVyfSByb3V0ZXJcbiAqIEBwYXJhbSB7U3RyaW5nQ29udmVyc2lvbn1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSb3V0aW5nRnJhbWV3b3JrKHJvdXRlciwgY29udmVydGVyKSB7XG4gICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gICAgdGhpcy5jb252ZXJ0ZXIgPSBjb252ZXJ0ZXI7XG59XG5cbi8qKlxuICogY29uZmlndXJlU2NoZW1hXG4gKi9cblJvdXRpbmdGcmFtZXdvcmsucHJvdG90eXBlLmNvbmZpZ3VyZVNjaGVtYSA9IGZ1bmN0aW9uIChyb3V0ZSkge1xuXG4gICAgaWYocm91dGUuc2NoZW1hKSB7XG4gICAgICAgIHRoaXMucm91dGVyW3JvdXRlLm1ldGhvZF0uY2FsbCh0aGlzLnJvdXRlciwgcm91dGUuaHJlZiwgdmFsaWRhdG9yKHJvdXRlLnNjaGVtYSkpO1xuICAgICAgICB0aGlzLnJvdXRlci51c2Uob25WYWxpZGF0b3JFcnJvcik7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogY29uZmlndXJlTWlkZGxlV2FyZVxuICovXG5Sb3V0aW5nRnJhbWV3b3JrLnByb3RvdHlwZS5jb25maWd1cmVNaWRkbGVXYXJlID0gZnVuY3Rpb24gKHJvdXRlLCBtaWRkbGV3YXJlKSB7XG5cbiAgICBpZihyb3V0ZS5taWRkbGV3YXJlKSB7XG5cbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLmNvbnZlcnRlci5mdW5jTGlzdFRvQXJyYXkocm91dGUubWlkZGxld2FyZSwgbWlkZGxld2FyZSk7XG4gICAgICAgIGFyZ3MudW5zaGlmdChyb3V0ZS5ocmVmKTtcbiAgICAgICAgdGhpcy5yb3V0ZXJbcm91dGUubWV0aG9kXS5hcHBseSh0aGlzLnJvdXRlciwgYXJncyk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogY29uZmlndXJlUXVlcmllc1xuICovXG5Sb3V0aW5nRnJhbWV3b3JrLnByb3RvdHlwZS5jb25maWd1cmVRdWVyaWVzID0gZnVuY3Rpb24gKHJvdXRlLCBtb2RlbHMsIHF1ZXJpZXMpIHtcblxuICAgIGlmIChyb3V0ZS5xdWVyeSkge1xuICAgICAgICB0aGlzLnJvdXRlcltyb3V0ZS5tZXRob2RdKHJvdXRlLmhyZWYsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgcXVlcmllc1tyb3V0ZS5xdWVyeS5zY3JpcHRdKG1vZGVsc1tyb3V0ZS5xdWVyeS5tb2RlbF0scmVxLCByZXMsIG5leHQsIHJvdXRlLnF1ZXJ5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIGNvbmZpZ3VyZUNvbnRyb2xsZXJzXG4gKi9cblJvdXRpbmdGcmFtZXdvcmsucHJvdG90eXBlLmNvbmZpZ3VyZUNvbnRyb2xsZXJzID0gZnVuY3Rpb24gKHJvdXRlLCBjb250cm9sbGVycykge1xuXG4gICAgaWYgKHJvdXRlLmNvbnRyb2xsZXIpIHtcblxuICAgICAgICB2YXIgYXJncyA9IHRoaXMuY29udmVydGVyLm1ldGhvZExpc3RUb0JvdW5kRnVuY3Rpb25BcnJheShyb3V0ZS5jb250cm9sbGVyLCBjb250cm9sbGVycyk7XG4gICAgICAgIGFyZ3MudW5zaGlmdChyb3V0ZS5ocmVmKTtcbiAgICAgICAgdGhpcy5yb3V0ZXJbcm91dGUubWV0aG9kXS5hcHBseSh0aGlzLnJvdXRlciwgYXJncyk7XG5cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHRvUm91dGVyXG4gKi9cblJvdXRpbmdGcmFtZXdvcmsucHJvdG90eXBlLnRvUm91dGVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yb3V0ZXI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvdXRpbmdGcmFtZXdvcms7XG4iXX0=