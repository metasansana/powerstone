'use strict';

var cookieParser = require('cookie-parser');
var methodOverride = require('method-override');
var bodyParser = require('body-parser');
var session = require('express-session');
var csrf = require('csurf');
var morgan = require('morgan');
var express = require('express');
var Builtin = require('./Builtin');

/**
 * WebAppFramework provides methods for setting up an express app in a powerstone application.
 * @param {express.Application} app
 * @constructor
 */
function WebAppFramework(app, config) {
    this.app = app;
    this.config = config;
}

/**
 * usePublic will set the public paths.
 * @param {String} root The root folder of the app.
 * @param {String|Array} paths
 */
WebAppFramework.prototype.usePublic = function (root) {

    var paths = this.config['public'];
    var app = this.app;

    if (typeof paths === 'string') app.use(express['static'](root + '/' + paths));

    if (Array.isArray(paths)) paths.forEach(function (folder) {
        app.use(express['static'](root + '/' + folder));
    });

    return this;
};

/**
 * useMethodOverride
 */
WebAppFramework.prototype.useMethodOverride = function () {
    this.app.use(methodOverride());
    return this;
};

/**
 * useBodyParser
 */
WebAppFramework.prototype.useBodyParser = function () {
    this.app.use(bodyParser.json());
    this.app.use(bodyParser.urlencoded({ extended: true }));
    return this;
};

/**
 * useCookieParser
 */
WebAppFramework.prototype.useCookieParser = function () {
    this.app.use(cookieParser(this.config.secret));
    return this;
};

/**
 * useSessions
 */
WebAppFramework.prototype.useSessions = function (connections) {

    if (connections.hasName('session')) this.config.session.store = connections.getByName('session').store;

    this.app.use(session(this.config.session));

    return this;
};

/**
 * useCSRF
 */
WebAppFramework.prototype.useCSRF = function () {

    if (this.config.csrf.enabled) {
        this.app.use(csrf());
        this.app.use(Builtin.sendCSRFToken);
    }

    return this;
};

/**
 * useLogging
 */
WebAppFramework.prototype.useLogging = function () {

    if (!this.config.morgan) return this;

    this.app.use(morgan(this.config.morgan.format || process.env.LOG_FORMAT || 'dev', this.config.morgan.options));

    return this;
};

/**
 * use simply calls the use method on the app.
 */
WebAppFramework.prototype.use = function (mware) {
    this.app.use(mware);
    return this;
};

/**
 * toApp
 * @returns {Express.Application}
 */
WebAppFramework.prototype.toApp = function () {
    return this.app;
};

module.exports = WebAppFramework;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWIvV2ViQXBwRnJhbWV3b3JrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzVDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2hELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN6QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLElBQUksT0FBTyxHQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7Ozs7Ozs7QUFPbkMsU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUNsQyxRQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNmLFFBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0NBQ3hCOzs7Ozs7O0FBT0QsZUFBZSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFBVSxJQUFJLEVBQUU7O0FBRWxELFFBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLFVBQU8sQ0FBQztBQUMvQixRQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDOztBQUVuQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLFVBQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUE7O0FBRy9DLFFBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDcEIsS0FBSyxDQUFDLE9BQU8s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ZUFBZSxDQUFDIiwiZmlsZSI6IldlYkFwcEZyYW1ld29yay5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb29raWVQYXJzZXIgPSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyk7XG52YXIgbWV0aG9kT3ZlcnJpZGUgPSByZXF1aXJlKCdtZXRob2Qtb3ZlcnJpZGUnKTtcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbnZhciBzZXNzaW9uID0gcmVxdWlyZSgnZXhwcmVzcy1zZXNzaW9uJyk7XG52YXIgY3NyZiA9IHJlcXVpcmUoJ2NzdXJmJyk7XG52YXIgbW9yZ2FuID0gcmVxdWlyZSgnbW9yZ2FuJyk7XG52YXIgZXhwcmVzcz0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIEJ1aWx0aW4gPSByZXF1aXJlKCcuL0J1aWx0aW4nKTtcblxuLyoqXG4gKiBXZWJBcHBGcmFtZXdvcmsgcHJvdmlkZXMgbWV0aG9kcyBmb3Igc2V0dGluZyB1cCBhbiBleHByZXNzIGFwcCBpbiBhIHBvd2Vyc3RvbmUgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge2V4cHJlc3MuQXBwbGljYXRpb259IGFwcFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFdlYkFwcEZyYW1ld29yayhhcHAsIGNvbmZpZykge1xuICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xufVxuXG4vKipcbiAqIHVzZVB1YmxpYyB3aWxsIHNldCB0aGUgcHVibGljIHBhdGhzLlxuICogQHBhcmFtIHtTdHJpbmd9IHJvb3QgVGhlIHJvb3QgZm9sZGVyIG9mIHRoZSBhcHAuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gcGF0aHNcbiAqL1xuV2ViQXBwRnJhbWV3b3JrLnByb3RvdHlwZS51c2VQdWJsaWMgPSBmdW5jdGlvbiAocm9vdCkge1xuXG4gICAgdmFyIHBhdGhzID0gdGhpcy5jb25maWcucHVibGljO1xuICAgIHZhciBhcHAgPSB0aGlzLmFwcDtcblxuICAgIGlmICh0eXBlb2YgcGF0aHMgPT09ICdzdHJpbmcnKVxuICAgICAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKHJvb3QgKyAnLycgKyBwYXRocykpXG5cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhdGhzKSlcbiAgICAgICAgcGF0aHMuZm9yRWFjaChmdW5jdGlvbiAoZm9sZGVyKSB7XG4gICAgICAgICAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKHJvb3QgKyAnLycgKyBmb2xkZXIpKTtcbiAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiB1c2VNZXRob2RPdmVycmlkZVxuICovXG5XZWJBcHBGcmFtZXdvcmsucHJvdG90eXBlLnVzZU1ldGhvZE92ZXJyaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXBwLnVzZShtZXRob2RPdmVycmlkZSgpKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogdXNlQm9keVBhcnNlclxuICovXG5XZWJBcHBGcmFtZXdvcmsucHJvdG90eXBlLnVzZUJvZHlQYXJzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgICB0aGlzLmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHtleHRlbmRlZDogdHJ1ZX0pKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogdXNlQ29va2llUGFyc2VyXG4gKi9cbldlYkFwcEZyYW1ld29yay5wcm90b3R5cGUudXNlQ29va2llUGFyc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXBwLnVzZShjb29raWVQYXJzZXIodGhpcy5jb25maWcuc2VjcmV0KSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHVzZVNlc3Npb25zXG4gKi9cbldlYkFwcEZyYW1ld29yay5wcm90b3R5cGUudXNlU2Vzc2lvbnMgPSBmdW5jdGlvbiAoY29ubmVjdGlvbnMpIHtcblxuICAgIGlmIChjb25uZWN0aW9ucy5oYXNOYW1lKCdzZXNzaW9uJykpXG4gICAgICAgIHRoaXMuY29uZmlnLnNlc3Npb24uc3RvcmUgPSBjb25uZWN0aW9ucy5nZXRCeU5hbWUoJ3Nlc3Npb24nKS5zdG9yZTtcblxuICAgIHRoaXMuYXBwLnVzZShzZXNzaW9uKHRoaXMuY29uZmlnLnNlc3Npb24pKTtcblxuICAgIHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIHVzZUNTUkZcbiAqL1xuV2ViQXBwRnJhbWV3b3JrLnByb3RvdHlwZS51c2VDU1JGID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmNzcmYuZW5hYmxlZCkge1xuICAgICAgICB0aGlzLmFwcC51c2UoY3NyZigpKTtcbiAgICAgICAgdGhpcy5hcHAudXNlKEJ1aWx0aW4uc2VuZENTUkZUb2tlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHVzZUxvZ2dpbmdcbiAqL1xuV2ViQXBwRnJhbWV3b3JrLnByb3RvdHlwZS51c2VMb2dnaW5nID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYoIXRoaXMuY29uZmlnLm1vcmdhbikgcmV0dXJuIHRoaXM7XG5cbiAgICB0aGlzLmFwcC51c2UoXG4gICAgICAgIG1vcmdhbih0aGlzLmNvbmZpZy5tb3JnYW4uZm9ybWF0IHx8XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5MT0dfRk9STUFUIHx8ICdkZXYnLCB0aGlzLmNvbmZpZy5tb3JnYW4ub3B0aW9ucykpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogdXNlIHNpbXBseSBjYWxscyB0aGUgdXNlIG1ldGhvZCBvbiB0aGUgYXBwLlxuICovXG5XZWJBcHBGcmFtZXdvcmsucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIChtd2FyZSkge1xuICAgIHRoaXMuYXBwLnVzZShtd2FyZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHRvQXBwXG4gKiBAcmV0dXJucyB7RXhwcmVzcy5BcHBsaWNhdGlvbn1cbiAqL1xuV2ViQXBwRnJhbWV3b3JrLnByb3RvdHlwZS50b0FwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcHA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYkFwcEZyYW1ld29yazsiXX0=