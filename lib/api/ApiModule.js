import Configuration from '../common/Configuration';
import Module from '../common/Module';
import Route from '../common/route/Route';
import restify from 'restify';

/**
 * Module
 * @param {string} fqn The name of the module prefixed with its parent modules 
 * @param {string} path 
 * @param {Configuration} config 
 * @param {Loader} loader 
 * @param {Application} app 
 */
class ApiModule extends Module {

    constructor(name, config, context, app) {

        super(name, config, context, app);

        this.viewEngine = function () {
            throw new Error('ApiModule does not support views!');
        };
    }

    __framework() {}

    __routing(point, app, actions) {

        var path = this.configuration.read(this.configuration.keys.PATH, `${ point }/${ this.name }`);
        var routes = this.configuration.routes;

        Object.keys(routes).forEach(route => this.routes = Object.keys(routes[route]).map(method => new Route(method, `${ path }/${ route }`, actions.generate(method, `${ path }/${ route }`, routes[route][method]), app)));

        this.modules.__routing(path, app, actions);
    }

}

export default ApiModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvQXBpTW9kdWxlLmpzIl0sIm5hbWVzIjpbIkNvbmZpZ3VyYXRpb24iLCJNb2R1bGUiLCJSb3V0ZSIsInJlc3RpZnkiLCJBcGlNb2R1bGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJjb25maWciLCJjb250ZXh0IiwiYXBwIiwidmlld0VuZ2luZSIsIkVycm9yIiwiX19mcmFtZXdvcmsiLCJfX3JvdXRpbmciLCJwb2ludCIsImFjdGlvbnMiLCJwYXRoIiwiY29uZmlndXJhdGlvbiIsInJlYWQiLCJrZXlzIiwiUEFUSCIsInJvdXRlcyIsIk9iamVjdCIsImZvckVhY2giLCJyb3V0ZSIsIm1hcCIsIm1ldGhvZCIsImdlbmVyYXRlIiwibW9kdWxlcyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsYUFBUCxNQUEwQix5QkFBMUI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGtCQUFuQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsdUJBQWxCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixTQUFwQjs7QUFFQTs7Ozs7Ozs7QUFRQSxNQUFNQyxTQUFOLFNBQXdCSCxNQUF4QixDQUErQjs7QUFFM0JJLGdCQUFZQyxJQUFaLEVBQWtCQyxNQUFsQixFQUEwQkMsT0FBMUIsRUFBbUNDLEdBQW5DLEVBQXdDOztBQUVwQyxjQUFNSCxJQUFOLEVBQVlDLE1BQVosRUFBb0JDLE9BQXBCLEVBQTZCQyxHQUE3Qjs7QUFFQSxhQUFLQyxVQUFMLEdBQWtCLFlBQVc7QUFDekIsa0JBQU0sSUFBSUMsS0FBSixDQUFVLG1DQUFWLENBQU47QUFDSCxTQUZEO0FBSUg7O0FBR0RDLGtCQUFjLENBR2I7O0FBRURDLGNBQVVDLEtBQVYsRUFBaUJMLEdBQWpCLEVBQXNCTSxPQUF0QixFQUErQjs7QUFFM0IsWUFBSUMsT0FBTyxLQUFLQyxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixLQUFLRCxhQUFMLENBQW1CRSxJQUFuQixDQUF3QkMsSUFBaEQsRUFBdUQsSUFBRU4sS0FBTSxNQUFHLEtBQUtSLElBQUssR0FBNUUsQ0FBWDtBQUNBLFlBQUllLFNBQVMsS0FBS0osYUFBTCxDQUFtQkksTUFBaEM7O0FBRUFDLGVBQU9ILElBQVAsQ0FBWUUsTUFBWixFQUNBRSxPQURBLENBQ1FDLFNBQ0osS0FBS0gsTUFBTCxHQUFjQyxPQUFPSCxJQUFQLENBQVlFLE9BQU9HLEtBQVAsQ0FBWixFQUEyQkMsR0FBM0IsQ0FBK0JDLFVBQ3pDLElBQUl4QixLQUFKLENBQVV3QixNQUFWLEVBQW1CLElBQUVWLElBQUssTUFBR1EsS0FBTSxHQUFuQyxFQUNJVCxRQUFRWSxRQUFSLENBQWlCRCxNQUFqQixFQUEwQixJQUFFVixJQUFLLE1BQUdRLEtBQU0sR0FBMUMsRUFDSUgsT0FBT0csS0FBUCxFQUFjRSxNQUFkLENBREosQ0FESixFQUVnQ2pCLEdBRmhDLENBRFUsQ0FGbEI7O0FBT0EsYUFBS21CLE9BQUwsQ0FBYWYsU0FBYixDQUF1QkcsSUFBdkIsRUFBNkJQLEdBQTdCLEVBQWtDTSxPQUFsQztBQUVIOztBQWhDMEI7O0FBb0MvQixlQUFlWCxTQUFmIiwiZmlsZSI6IkFwaU1vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25maWd1cmF0aW9uIGZyb20gJy4uL2NvbW1vbi9Db25maWd1cmF0aW9uJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY29tbW9uL01vZHVsZSc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi4vY29tbW9uL3JvdXRlL1JvdXRlJztcbmltcG9ydCByZXN0aWZ5IGZyb20gJ3Jlc3RpZnknO1xuXG4vKipcbiAqIE1vZHVsZVxuICogQHBhcmFtIHtzdHJpbmd9IGZxbiBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIHByZWZpeGVkIHdpdGggaXRzIHBhcmVudCBtb2R1bGVzIFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggXG4gKiBAcGFyYW0ge0NvbmZpZ3VyYXRpb259IGNvbmZpZyBcbiAqIEBwYXJhbSB7TG9hZGVyfSBsb2FkZXIgXG4gKiBAcGFyYW0ge0FwcGxpY2F0aW9ufSBhcHAgXG4gKi9cbmNsYXNzIEFwaU1vZHVsZSBleHRlbmRzIE1vZHVsZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjb25maWcsIGNvbnRleHQsIGFwcCkge1xuXG4gICAgICAgIHN1cGVyKG5hbWUsIGNvbmZpZywgY29udGV4dCwgYXBwKTtcblxuICAgICAgICB0aGlzLnZpZXdFbmdpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXBpTW9kdWxlIGRvZXMgbm90IHN1cHBvcnQgdmlld3MhJyk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgX19mcmFtZXdvcmsoKSB7XG5cblxuICAgIH1cblxuICAgIF9fcm91dGluZyhwb2ludCwgYXBwLCBhY3Rpb25zKSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLmNvbmZpZ3VyYXRpb24ucmVhZCh0aGlzLmNvbmZpZ3VyYXRpb24ua2V5cy5QQVRILCBgJHtwb2ludH0vJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgIHZhciByb3V0ZXMgPSB0aGlzLmNvbmZpZ3VyYXRpb24ucm91dGVzO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHJvdXRlcykuXG4gICAgICAgIGZvckVhY2gocm91dGUgPT5cbiAgICAgICAgICAgIHRoaXMucm91dGVzID0gT2JqZWN0LmtleXMocm91dGVzW3JvdXRlXSkubWFwKG1ldGhvZCA9PlxuICAgICAgICAgICAgICAgIG5ldyBSb3V0ZShtZXRob2QsIGAke3BhdGh9LyR7cm91dGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5nZW5lcmF0ZShtZXRob2QsIGAke3BhdGh9LyR7cm91dGV9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlc1tyb3V0ZV1bbWV0aG9kXSksIGFwcCkpKTtcblxuICAgICAgICB0aGlzLm1vZHVsZXMuX19yb3V0aW5nKHBhdGgsIGFwcCwgYWN0aW9ucyk7XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBpTW9kdWxlXG4iXX0=