import Property from 'property-seek';

//TODO Someday we will parse the action string with arguments and all, until then,
//bare with me.
function resolveAction(action, controllers) {

    var split;
    var Controller;
    var path;
    var type;
    var method;
    var is_call = function (str) {

        str = str || '';

        if (str.indexOf('(') > -1) if (str.indexOf(')') > -1) return true;
    };

    if (is_call(action)) {
        split = action.slice(0, -2).split('.');
        method = split.pop();
    } else {
        split = action.split('.');
    }

    path = split.join('.');
    Controller = Property.get(controllers, path);

    return function (req, res) {
        new Controller(req, res)[method]();
    };
    return Controller;
}

/**
 * ControllerAction configures handlers for controllers.
 * @param {object} controllers A map of known controllers
 */
class ControllerAction {

    constructor(controllers) {

        this._controllers = controllers;
    }

    generate(method, path, route) {

        if (typeof route.action === 'string') return resolveAction(route.action, this._controllers);

        if (typeof route.action === 'function') return route.action;
    }

}

export default ControllerAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vcm91dGUvQ29udHJvbGxlckFjdGlvbi5qcyJdLCJuYW1lcyI6WyJQcm9wZXJ0eSIsInJlc29sdmVBY3Rpb24iLCJhY3Rpb24iLCJjb250cm9sbGVycyIsInNwbGl0IiwiQ29udHJvbGxlciIsInBhdGgiLCJ0eXBlIiwibWV0aG9kIiwiaXNfY2FsbCIsInN0ciIsImluZGV4T2YiLCJzbGljZSIsInBvcCIsImpvaW4iLCJnZXQiLCJyZXEiLCJyZXMiLCJDb250cm9sbGVyQWN0aW9uIiwiY29uc3RydWN0b3IiLCJfY29udHJvbGxlcnMiLCJnZW5lcmF0ZSIsInJvdXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxRQUFQLE1BQXFCLGVBQXJCOztBQUVBO0FBQ0E7QUFDQSxTQUFTQyxhQUFULENBQXVCQyxNQUF2QixFQUErQkMsV0FBL0IsRUFBNEM7O0FBRXhDLFFBQUlDLEtBQUo7QUFDQSxRQUFJQyxVQUFKO0FBQ0EsUUFBSUMsSUFBSjtBQUNBLFFBQUlDLElBQUo7QUFDQSxRQUFJQyxNQUFKO0FBQ0EsUUFBSUMsVUFBVSxVQUFTQyxHQUFULEVBQWM7O0FBRXhCQSxjQUFNQSxPQUFPLEVBQWI7O0FBRUEsWUFBSUEsSUFBSUMsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBQyxDQUF4QixFQUNJLElBQUlELElBQUlDLE9BQUosQ0FBWSxHQUFaLElBQW1CLENBQUMsQ0FBeEIsRUFDSSxPQUFPLElBQVA7QUFDWCxLQVBEOztBQVNBLFFBQUlGLFFBQVFQLE1BQVIsQ0FBSixFQUFxQjtBQUNqQkUsZ0JBQVFGLE9BQU9VLEtBQVAsQ0FBYSxDQUFiLEVBQWdCLENBQUMsQ0FBakIsRUFBb0JSLEtBQXBCLENBQTBCLEdBQTFCLENBQVI7QUFDQUksaUJBQVNKLE1BQU1TLEdBQU4sRUFBVDtBQUNILEtBSEQsTUFHTztBQUNIVCxnQkFBUUYsT0FBT0UsS0FBUCxDQUFhLEdBQWIsQ0FBUjtBQUNIOztBQUVERSxXQUFPRixNQUFNVSxJQUFOLENBQVcsR0FBWCxDQUFQO0FBQ0FULGlCQUFhTCxTQUFTZSxHQUFULENBQWFaLFdBQWIsRUFBMEJHLElBQTFCLENBQWI7O0FBRUEsV0FBTyxVQUFTVSxHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFDckIsWUFBSVosVUFBSixDQUFlVyxHQUFmLEVBQW9CQyxHQUFwQixDQUFELENBQTJCVCxNQUEzQjtBQUNILEtBRkQ7QUFHQSxXQUFPSCxVQUFQO0FBQ0g7O0FBRUQ7Ozs7QUFJQSxNQUFNYSxnQkFBTixDQUF1Qjs7QUFFbkJDLGdCQUFZaEIsV0FBWixFQUF5Qjs7QUFFckIsYUFBS2lCLFlBQUwsR0FBb0JqQixXQUFwQjtBQUVIOztBQUVEa0IsYUFBU2IsTUFBVCxFQUFpQkYsSUFBakIsRUFBdUJnQixLQUF2QixFQUE4Qjs7QUFHMUIsWUFBSSxPQUFPQSxNQUFNcEIsTUFBYixLQUF3QixRQUE1QixFQUNJLE9BQU9ELGNBQWNxQixNQUFNcEIsTUFBcEIsRUFBNEIsS0FBS2tCLFlBQWpDLENBQVA7O0FBRUosWUFBSSxPQUFPRSxNQUFNcEIsTUFBYixLQUF3QixVQUE1QixFQUNJLE9BQU9vQixNQUFNcEIsTUFBYjtBQUVQOztBQWpCa0I7O0FBcUJ2QixlQUFlZ0IsZ0JBQWYiLCJmaWxlIjoiQ29udHJvbGxlckFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wZXJ0eSBmcm9tICdwcm9wZXJ0eS1zZWVrJztcblxuLy9UT0RPIFNvbWVkYXkgd2Ugd2lsbCBwYXJzZSB0aGUgYWN0aW9uIHN0cmluZyB3aXRoIGFyZ3VtZW50cyBhbmQgYWxsLCB1bnRpbCB0aGVuLFxuLy9iYXJlIHdpdGggbWUuXG5mdW5jdGlvbiByZXNvbHZlQWN0aW9uKGFjdGlvbiwgY29udHJvbGxlcnMpIHtcblxuICAgIHZhciBzcGxpdDtcbiAgICB2YXIgQ29udHJvbGxlcjtcbiAgICB2YXIgcGF0aDtcbiAgICB2YXIgdHlwZTtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBpc19jYWxsID0gZnVuY3Rpb24oc3RyKSB7XG5cbiAgICAgICAgc3RyID0gc3RyIHx8ICcnO1xuXG4gICAgICAgIGlmIChzdHIuaW5kZXhPZignKCcpID4gLTEpXG4gICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJyknKSA+IC0xKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc19jYWxsKGFjdGlvbikpIHtcbiAgICAgICAgc3BsaXQgPSBhY3Rpb24uc2xpY2UoMCwgLTIpLnNwbGl0KCcuJyk7XG4gICAgICAgIG1ldGhvZCA9IHNwbGl0LnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGl0ID0gYWN0aW9uLnNwbGl0KCcuJyk7XG4gICAgfVxuXG4gICAgcGF0aCA9IHNwbGl0LmpvaW4oJy4nKTtcbiAgICBDb250cm9sbGVyID0gUHJvcGVydHkuZ2V0KGNvbnRyb2xsZXJzLCBwYXRoKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgICAgICAobmV3IENvbnRyb2xsZXIocmVxLCByZXMpKVttZXRob2RdKCk7XG4gICAgfVxuICAgIHJldHVybiBDb250cm9sbGVyO1xufVxuXG4vKipcbiAqIENvbnRyb2xsZXJBY3Rpb24gY29uZmlndXJlcyBoYW5kbGVycyBmb3IgY29udHJvbGxlcnMuXG4gKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlcnMgQSBtYXAgb2Yga25vd24gY29udHJvbGxlcnNcbiAqL1xuY2xhc3MgQ29udHJvbGxlckFjdGlvbiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250cm9sbGVycykge1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2xsZXJzID0gY29udHJvbGxlcnM7XG5cbiAgICB9XG5cbiAgICBnZW5lcmF0ZShtZXRob2QsIHBhdGgsIHJvdXRlKSB7XG5cblxuICAgICAgICBpZiAodHlwZW9mIHJvdXRlLmFjdGlvbiA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFjdGlvbihyb3V0ZS5hY3Rpb24sIHRoaXMuX2NvbnRyb2xsZXJzKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJvdXRlLmFjdGlvbiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHJldHVybiByb3V0ZS5hY3Rpb247XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlckFjdGlvblxuIl19