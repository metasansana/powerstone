'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Report = require('../Report');

var _Report2 = _interopRequireDefault(_Report);

var _must = require('must');

var _must2 = _interopRequireDefault(_must);

var report;
var recorder;

describe('Report', function () {

    beforeEach(function () {

        recorder = {
            taskCompleted: function taskCompleted(report) {
                this.report = report;
            }
        };

        report = new _Report2['default'](recorder);
    });

    it('taskCompleted()', function () {

        report.taskStarted('testingTask1', 'The test has started!');
        report.taskCompleted('The task has completed!');

        (0, _must2['default'])(recorder.report.timesCompleted).be(1);
        (0, _must2['default'])(recorder.report.timesCompletedWithError).be(0);
        (0, _must2['default'])(recorder.report.taskID).be('testingTask1');
        (0, _must2['default'])(recorder.report.timeStarted).be.an.array();
        (0, _must2['default'])(recorder.report.timeEnded).be.an.array();
        (0, _must2['default'])(recorder.report.duration).be.an.array();
        (0, _must2['default'])(recorder.report.status).be('GOOD');
        (0, _must2['default'])(recorder.report.message).be('The task has completed!');
    });

    it('taskCompletedWithError()', function (done) {

        report.taskStarted('testingTask2', 'The test has started!');
        report.taskCompletedWithError(new Error('Phony Error'));
        (0, _must2['default'])(recorder.report.timesCompleted).be(0);
        (0, _must2['default'])(recorder.report.timesCompletedWithError).be(1);
        (0, _must2['default'])(recorder.report.taskID).be('testingTask2');
        (0, _must2['default'])(recorder.report.timeStarted).be.an.array();
        (0, _must2['default'])(recorder.report.timeEnded).be.an.array();
        (0, _must2['default'])(recorder.report.duration).be.an.array();
        (0, _must2['default'])(recorder.report.status).be('ERROR');
        (0, _must2['default'])(recorder.report.message).be('Phony Error');
        done();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrL3Rlc3QvUmVwb3J0X3Rlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztzQkFBbUIsV0FBVzs7OztvQkFDYixNQUFNOzs7O0FBRXZCLElBQUksTUFBTSxDQUFDO0FBQ1gsSUFBSSxRQUFRLENBQUM7O0FBRWIsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFXOztBQUUxQixjQUFVLENBQUMsWUFBVTs7QUFFakIsZ0JBQVEsR0FBRztBQUNQLHlCQUFhLEVBQUUsdUJBQVUsTUFBTSxFQUFFO0FBQzdCLG9CQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzthQUN4QjtTQUNKLENBQUM7O0FBRUYsY0FBTSxHQUFHLHdCQUFXLFFBQVEsQ0FBQyxDQUFDO0tBRWpDLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsaUJBQWlCLEVBQUUsWUFBVzs7QUFFN0IsY0FBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUM1RCxjQUFNLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLENBQUM7O0FBRWhELCtCQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNDLCtCQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEQsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDaEQsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2hELCtCQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUM5QywrQkFBSyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0MsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUUvRCxDQUFDLENBQUM7O0FBR0gsTUFBRSxDQUFDLDBCQUEwQixFQUFFLFVBQVMsSUFBSSxFQUFFOztBQUUxQyxjQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0FBQzVELGNBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ3hELCtCQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNDLCtCQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEQsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDaEQsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2hELCtCQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUM5QywrQkFBSyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0MsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekMsK0JBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEQsWUFBSSxFQUFFLENBQUM7S0FHVixDQUFDLENBQUM7Q0FHTixDQUFDLENBQUMiLCJmaWxlIjoiUmVwb3J0X3Rlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVwb3J0IGZyb20gJy4uL1JlcG9ydCc7XG5pbXBvcnQgbXVzdCBmcm9tICdtdXN0JztcblxudmFyIHJlcG9ydDtcbnZhciByZWNvcmRlcjtcblxuZGVzY3JpYmUoJ1JlcG9ydCcsIGZ1bmN0aW9uKCkge1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpe1xuXG4gICAgICAgIHJlY29yZGVyID0ge1xuICAgICAgICAgICAgdGFza0NvbXBsZXRlZDogZnVuY3Rpb24gKHJlcG9ydCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0ID0gcmVwb3J0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJlcG9ydCA9IG5ldyBSZXBvcnQocmVjb3JkZXIpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgndGFza0NvbXBsZXRlZCgpJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmVwb3J0LnRhc2tTdGFydGVkKCd0ZXN0aW5nVGFzazEnLCAnVGhlIHRlc3QgaGFzIHN0YXJ0ZWQhJyk7XG4gICAgICAgIHJlcG9ydC50YXNrQ29tcGxldGVkKCdUaGUgdGFzayBoYXMgY29tcGxldGVkIScpO1xuXG4gICAgICAgIG11c3QocmVjb3JkZXIucmVwb3J0LnRpbWVzQ29tcGxldGVkKS5iZSgxKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQudGltZXNDb21wbGV0ZWRXaXRoRXJyb3IpLmJlKDApO1xuICAgICAgICBtdXN0KHJlY29yZGVyLnJlcG9ydC50YXNrSUQpLmJlKCd0ZXN0aW5nVGFzazEnKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQudGltZVN0YXJ0ZWQpLmJlLmFuLmFycmF5KCk7XG4gICAgICAgIG11c3QocmVjb3JkZXIucmVwb3J0LnRpbWVFbmRlZCkuYmUuYW4uYXJyYXkoKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQuZHVyYXRpb24pLmJlLmFuLmFycmF5KCk7XG4gICAgICAgIG11c3QocmVjb3JkZXIucmVwb3J0LnN0YXR1cykuYmUoJ0dPT0QnKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQubWVzc2FnZSkuYmUoJ1RoZSB0YXNrIGhhcyBjb21wbGV0ZWQhJyk7XG5cbiAgICB9KTtcblxuXG4gICAgaXQoJ3Rhc2tDb21wbGV0ZWRXaXRoRXJyb3IoKScsIGZ1bmN0aW9uKGRvbmUpIHtcblxuICAgICAgICByZXBvcnQudGFza1N0YXJ0ZWQoJ3Rlc3RpbmdUYXNrMicsICdUaGUgdGVzdCBoYXMgc3RhcnRlZCEnKTtcbiAgICAgICAgcmVwb3J0LnRhc2tDb21wbGV0ZWRXaXRoRXJyb3IobmV3IEVycm9yKCdQaG9ueSBFcnJvcicpKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQudGltZXNDb21wbGV0ZWQpLmJlKDApO1xuICAgICAgICBtdXN0KHJlY29yZGVyLnJlcG9ydC50aW1lc0NvbXBsZXRlZFdpdGhFcnJvcikuYmUoMSk7XG4gICAgICAgIG11c3QocmVjb3JkZXIucmVwb3J0LnRhc2tJRCkuYmUoJ3Rlc3RpbmdUYXNrMicpO1xuICAgICAgICBtdXN0KHJlY29yZGVyLnJlcG9ydC50aW1lU3RhcnRlZCkuYmUuYW4uYXJyYXkoKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQudGltZUVuZGVkKS5iZS5hbi5hcnJheSgpO1xuICAgICAgICBtdXN0KHJlY29yZGVyLnJlcG9ydC5kdXJhdGlvbikuYmUuYW4uYXJyYXkoKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQuc3RhdHVzKS5iZSgnRVJST1InKTtcbiAgICAgICAgbXVzdChyZWNvcmRlci5yZXBvcnQubWVzc2FnZSkuYmUoJ1Bob255IEVycm9yJyk7XG4gICAgICAgIGRvbmUoKTtcblxuXG4gICAgfSk7XG5cblxufSk7XG4iXX0=