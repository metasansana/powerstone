'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Runner = require('../Runner');

var _Runner2 = _interopRequireDefault(_Runner);

var _must = require('must');

var _must2 = _interopRequireDefault(_must);

var runner;
var tasks;
var recorder;

function makeRunnableTask() {
    return {
        count: 0,
        taskWillRun: function taskWillRun(yes, no) {
            yes();
        },
        run: function run(_, done) {
            this.count++;
            done();
        }
    };
}

function makeUnRunnableTask() {
    return {
        count: 0,
        taskWillRun: function taskWillRun(yes, no) {
            no();
        },
        run: function run(done) {
            this.count++;
            done();
        }
    };
}

describe('Runner', function () {

    beforeEach(function () {});

    it('will run tasks that should be run', function () {
        var repeatTask = makeRunnableTask();
        var repeatTask2 = makeUnRunnableTask();
        tasks = [makeRunnableTask(), repeatTask2, repeatTask2, makeUnRunnableTask(), repeatTask, repeatTask, makeRunnableTask()];

        runner = new _Runner2['default'](tasks, { taskCompleted: function taskCompleted() {} });
        return runner.runAllTasks().then(function () {
            (0, _must2['default'])(tasks[0].count).be(1);
            (0, _must2['default'])(tasks[1].count).be(0);
            (0, _must2['default'])(tasks[2].count).be(0);
            (0, _must2['default'])(tasks[3].count).be(0);
            (0, _must2['default'])(tasks[4].count).be(2);
            (0, _must2['default'])(tasks[5].count).be(2);
            (0, _must2['default'])(tasks[6].count).be(1);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrL3Rlc3QvUnVubmVyX3Rlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztzQkFBbUIsV0FBVzs7OztvQkFDYixNQUFNOzs7O0FBR3ZCLElBQUksTUFBTSxDQUFDO0FBQ1gsSUFBSSxLQUFLLENBQUM7QUFDVixJQUFJLFFBQVEsQ0FBQzs7QUFFYixTQUFTLGdCQUFnQixHQUFHO0FBQ3hCLFdBQU87QUFDSCxhQUFLLEVBQUUsQ0FBQztBQUNSLG1CQUFXLEVBQUUscUJBQVMsR0FBRyxFQUFFLEVBQUUsRUFBQztBQUMxQixlQUFHLEVBQUUsQ0FBQztTQUNUO0FBQ0QsV0FBRyxFQUFFLGFBQVMsQ0FBQyxFQUFFLElBQUksRUFBQztBQUNsQixnQkFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2IsZ0JBQUksRUFBRSxDQUFDO1NBQ1Y7S0FDSixDQUFBO0NBQ0o7O0FBRUQsU0FBUyxrQkFBa0IsR0FBRztBQUMxQixXQUFPO0FBQ0gsYUFBSyxFQUFFLENBQUM7QUFDUixtQkFBVyxFQUFFLHFCQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUM7QUFDMUIsY0FBRSxFQUFFLENBQUM7U0FDUjtBQUNELFdBQUcsRUFBRSxhQUFTLElBQUksRUFBQztBQUNmLGdCQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDYixnQkFBSSxFQUFFLENBQUM7U0FDVjtLQUNKLENBQUE7Q0FDSjs7QUFFRCxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQVc7O0FBRTFCLGNBQVUsQ0FBQyxZQUFVLEVBRXBCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsbUNBQW1DLEVBQUUsWUFBVztBQUMvQyxZQUFJLFVBQVUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3BDLFlBQUksV0FBVyxHQUFHLGtCQUFrQixFQUFFLENBQUM7QUFDdkMsYUFBSyxHQUFHLENBQ0osZ0JBQWdCLEVBQUUsRUFDbEIsV0FBVyxFQUNYLFdBQVcsRUFDWCxrQkFBa0IsRUFBRSxFQUNwQixVQUFVLEVBQ1YsVUFBVSxFQUNWLGdCQUFnQixFQUFFLENBQUMsQ0FBQzs7QUFFeEIsY0FBTSxHQUFHLHdCQUFXLEtBQUssRUFBRSxFQUFDLGFBQWEsRUFBRSx5QkFBVSxFQUFFLEVBQUMsQ0FBQyxDQUFDO0FBQzFELGVBQU8sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUN2QixJQUFJLENBQUMsWUFBVTtBQUNYLG1DQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsbUNBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixtQ0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLG1DQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsbUNBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixtQ0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLG1DQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUIsQ0FBQyxDQUFDO0tBQ1YsQ0FBQyxDQUFBO0NBRUwsQ0FBQyxDQUFDIiwiZmlsZSI6IlJ1bm5lcl90ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJ1bm5lciBmcm9tICcuLi9SdW5uZXInO1xuaW1wb3J0IG11c3QgZnJvbSAnbXVzdCc7XG5cblxudmFyIHJ1bm5lcjtcbnZhciB0YXNrcztcbnZhciByZWNvcmRlcjtcblxuZnVuY3Rpb24gbWFrZVJ1bm5hYmxlVGFzaygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdGFza1dpbGxSdW46IGZ1bmN0aW9uKHllcywgbm8pe1xuICAgICAgICAgICAgeWVzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oXywgZG9uZSl7XG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VVblJ1bm5hYmxlVGFzaygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgdGFza1dpbGxSdW46IGZ1bmN0aW9uKHllcywgbm8pe1xuICAgICAgICAgICAgbm8oKTtcbiAgICAgICAgfSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbihkb25lKXtcbiAgICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZGVzY3JpYmUoJ1J1bm5lcicsIGZ1bmN0aW9uKCkge1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpe1xuXG4gICAgfSk7XG5cbiAgICBpdCgnd2lsbCBydW4gdGFza3MgdGhhdCBzaG91bGQgYmUgcnVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXBlYXRUYXNrID0gbWFrZVJ1bm5hYmxlVGFzaygpO1xuICAgICAgICB2YXIgcmVwZWF0VGFzazIgPSBtYWtlVW5SdW5uYWJsZVRhc2soKTtcbiAgICAgICAgdGFza3MgPSBbXG4gICAgICAgICAgICBtYWtlUnVubmFibGVUYXNrKCksXG4gICAgICAgICAgICByZXBlYXRUYXNrMixcbiAgICAgICAgICAgIHJlcGVhdFRhc2syLFxuICAgICAgICAgICAgbWFrZVVuUnVubmFibGVUYXNrKCksXG4gICAgICAgICAgICByZXBlYXRUYXNrLFxuICAgICAgICAgICAgcmVwZWF0VGFzayxcbiAgICAgICAgICAgIG1ha2VSdW5uYWJsZVRhc2soKV07XG5cbiAgICAgICAgcnVubmVyID0gbmV3IFJ1bm5lcih0YXNrcywge3Rhc2tDb21wbGV0ZWQ6IGZ1bmN0aW9uKCl7fX0pO1xuICAgICAgICByZXR1cm4gcnVubmVyLnJ1bkFsbFRhc2tzKCkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1swXS5jb3VudCkuYmUoMSk7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1sxXS5jb3VudCkuYmUoMCk7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1syXS5jb3VudCkuYmUoMCk7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1szXS5jb3VudCkuYmUoMCk7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1s0XS5jb3VudCkuYmUoMik7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1s1XS5jb3VudCkuYmUoMik7XG4gICAgICAgICAgICAgICAgbXVzdCh0YXNrc1s2XS5jb3VudCkuYmUoMSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KVxuXG59KTsiXX0=