'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Runner = require('../Runner');

var _Runner2 = _interopRequireDefault(_Runner);

var _must = require('must');

var _must2 = _interopRequireDefault(_must);

var runner;
var tasks;
var recorder;

function makeRunnableTask() {
    return {
        count: 0,
        taskWillRun: function taskWillRun(yes, no) {
            yes();
        },
        run: function run(_, done) {
            this.count++;
            done();
        }
    };
}

function makeUnRunnableTask() {
    return {
        count: 0,
        taskWillRun: function taskWillRun(yes, no) {
            no();
        },
        run: function run(done) {
            this.count++;
            done();
        }
    };
}

describe('Runner', function () {

    beforeEach(function () {});

    it('will run tasks that should be run', function () {
        var repeatTask = makeRunnableTask();
        var repeatTask2 = makeUnRunnableTask();
        tasks = [makeRunnableTask(), repeatTask2, repeatTask2, makeUnRunnableTask(), repeatTask, repeatTask, makeRunnableTask()];

        runner = new _Runner2['default'](tasks, { taskCompleted: function taskCompleted() {} });
        return runner.runAllTasks().then(function () {
            (0, _must2['default'])(tasks[0].count).be(1);
            (0, _must2['default'])(tasks[1].count).be(0);
            (0, _must2['default'])(tasks[2].count).be(0);
            (0, _must2['default'])(tasks[3].count).be(0);
            (0, _must2['default'])(tasks[4].count).be(2);
            (0, _must2['default'])(tasks[5].count).be(2);
            (0, _must2['default'])(tasks[6].count).be(1);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy90ZXN0L1J1bm5lcl90ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7c0JBQW1CLFdBQVc7Ozs7b0JBQ2IsTUFBTTs7OztBQUd2QixJQUFJLE1BQU0sQ0FBQztBQUNYLElBQUksS0FBSyxDQUFDO0FBQ1YsSUFBSSxRQUFRLENBQUM7O0FBRWIsU0FBUyxnQkFBZ0IsR0FBRztBQUN4QixXQUFPO0FBQ0gsYUFBSyxFQUFFLENBQUM7QUFDUixtQkFBVyxFQUFFLHFCQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUM7QUFDMUIsZUFBRyxFQUFFLENBQUM7U0FDVDtBQUNELFdBQUcsRUFBRSxhQUFTLENBQUMsRUFBRSxJQUFJLEVBQUM7QUFDbEIsZ0JBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNiLGdCQUFJLEVBQUUsQ0FBQztTQUNWO0tBQ0osQ0FBQTtDQUNKOztBQUVELFNBQVMsa0JBQWtCLEdBQUc7QUFDMUIsV0FBTztBQUNILGFBQUssRUFBRSxDQUFDO0FBQ1IsbUJBQVcsRUFBRSxxQkFBUyxHQUFHLEVBQUUsRUFBRSxFQUFDO0FBQzFCLGNBQUUsRUFBRSxDQUFDO1NBQ1I7QUFDRCxXQUFHLEVBQUUsYUFBUyxJQUFJLEVBQUM7QUFDZixnQkFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2IsZ0JBQUksRUFBRSxDQUFDO1NBQ1Y7S0FDSixDQUFBO0NBQ0o7O0FBRUQsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFXOztBQUUxQixjQUFVLENBQUMsWUFBVSxFQUVwQixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQVc7QUFDL0MsWUFBSSxVQUFVLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztBQUNwQyxZQUFJLFdBQVcsR0FBRyxrQkFBa0IsRUFBRSxDQUFDO0FBQ3ZDLGFBQUssR0FBRyxDQUNKLGdCQUFnQixFQUFFLEVBQ2xCLFdBQVcsRUFDWCxXQUFXLEVBQ1gsa0JBQWtCLEVBQUUsRUFDcEIsVUFBVSxFQUNWLFVBQVUsRUFDVixnQkFBZ0IsRUFBRSxDQUFDLENBQUM7O0FBRXhCLGNBQU0sR0FBRyx3QkFBVyxLQUFLLEVBQUUsRUFBQyxhQUFhLEVBQUUseUJBQVUsRUFBRSxFQUFDLENBQUMsQ0FBQztBQUMxRCxlQUFPLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FDdkIsSUFBSSxDQUFDLFlBQVU7QUFDWCxtQ0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLG1DQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsbUNBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixtQ0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLG1DQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsbUNBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixtQ0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztLQUNWLENBQUMsQ0FBQTtDQUVMLENBQUMsQ0FBQyIsImZpbGUiOiJSdW5uZXJfdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSdW5uZXIgZnJvbSAnLi4vUnVubmVyJztcbmltcG9ydCBtdXN0IGZyb20gJ211c3QnO1xuXG5cbnZhciBydW5uZXI7XG52YXIgdGFza3M7XG52YXIgcmVjb3JkZXI7XG5cbmZ1bmN0aW9uIG1ha2VSdW5uYWJsZVRhc2soKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHRhc2tXaWxsUnVuOiBmdW5jdGlvbih5ZXMsIG5vKXtcbiAgICAgICAgICAgIHllcygpO1xuICAgICAgICB9LFxuICAgICAgICBydW46IGZ1bmN0aW9uKF8sIGRvbmUpe1xuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlVW5SdW5uYWJsZVRhc2soKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHRhc2tXaWxsUnVuOiBmdW5jdGlvbih5ZXMsIG5vKXtcbiAgICAgICAgICAgIG5vKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oZG9uZSl7XG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmRlc2NyaWJlKCdSdW5uZXInLCBmdW5jdGlvbigpIHtcblxuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKXtcblxuICAgIH0pO1xuXG4gICAgaXQoJ3dpbGwgcnVuIHRhc2tzIHRoYXQgc2hvdWxkIGJlIHJ1bicsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVwZWF0VGFzayA9IG1ha2VSdW5uYWJsZVRhc2soKTtcbiAgICAgICAgdmFyIHJlcGVhdFRhc2syID0gbWFrZVVuUnVubmFibGVUYXNrKCk7XG4gICAgICAgIHRhc2tzID0gW1xuICAgICAgICAgICAgbWFrZVJ1bm5hYmxlVGFzaygpLFxuICAgICAgICAgICAgcmVwZWF0VGFzazIsXG4gICAgICAgICAgICByZXBlYXRUYXNrMixcbiAgICAgICAgICAgIG1ha2VVblJ1bm5hYmxlVGFzaygpLFxuICAgICAgICAgICAgcmVwZWF0VGFzayxcbiAgICAgICAgICAgIHJlcGVhdFRhc2ssXG4gICAgICAgICAgICBtYWtlUnVubmFibGVUYXNrKCldO1xuXG4gICAgICAgIHJ1bm5lciA9IG5ldyBSdW5uZXIodGFza3MsIHt0YXNrQ29tcGxldGVkOiBmdW5jdGlvbigpe319KTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lci5ydW5BbGxUYXNrcygpLlxuICAgICAgICAgICAgdGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbMF0uY291bnQpLmJlKDEpO1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbMV0uY291bnQpLmJlKDApO1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbMl0uY291bnQpLmJlKDApO1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbM10uY291bnQpLmJlKDApO1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbNF0uY291bnQpLmJlKDIpO1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbNV0uY291bnQpLmJlKDIpO1xuICAgICAgICAgICAgICAgIG11c3QodGFza3NbNl0uY291bnQpLmJlKDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSlcblxufSk7Il19