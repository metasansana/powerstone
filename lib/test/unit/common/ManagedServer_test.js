'use strict';

var must = require('must');
var supertest = require('supertest');
var express = require('express');
var http = require('http');
var ManagedServer = require('../../../src/common/ManagedServer');

var server;
var app;
var request;
var impl;
var DO_NOT_CLOSE = false;

describe('ManagedServer', function () {

    beforeEach(function (done) {

        app = express();

        app.get('/', function (req, res) {
            res.status(204).send();
        });

        impl = {

            server: http.createServer(app),

            listen: function listen() {
                this.server.listen(7777);
            },

            on: function on() {
                this.server.on.apply(this.server, arguments);
            },

            close: function close(cb) {
                this.server.close(cb);
            }
        };

        request = supertest(app);
        server = new ManagedServer(impl);
        done();
    });

    afterEach(function (done) {
        if (DO_NOT_CLOSE) return done();
        return impl.server.close(done);
    });

    afterEach(function () {
        DO_NOT_CLOSE = false;
    });

    xit('must be able to start', function (done) {
        server.start().then(function () {
            request.get('/').expect(204).end(done);
        });
    });

    xit('must be able to restart', function (done) {

        server.start().then(function (server) {
            return server.restart();
        }).then(function () {
            request.get('/').expect(204).end(done);
        })['catch'](done);
    });

    xit('must be able to be shutdown', function (done) {

        DO_NOT_CLOSE = true;

        return server.start().then(function (server) {
            return server.shutdown();
        }).then(function () {
            request.get('/').end(function (err) {
                must(true).be['true']();
                done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXN0L3VuaXQvY29tbW9uL01hbmFnZWRTZXJ2ZXJfdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDckMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQzs7QUFFakUsSUFBSSxNQUFNLENBQUM7QUFDWCxJQUFJLEdBQUcsQ0FBQztBQUNSLElBQUksT0FBTyxDQUFDO0FBQ1osSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBVzs7QUFFakMsY0FBVSxDQUFDLFVBQVMsSUFBSSxFQUFFOztBQUV0QixXQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7O0FBRWhCLFdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUM1QixlQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzFCLENBQUMsQ0FBQzs7QUFFSCxZQUFJLEdBQUc7O0FBRUgsa0JBQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQzs7QUFFOUIsa0JBQU0sRUFBRSxrQkFBVztBQUNmLG9CQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1Qjs7QUFFRCxjQUFFLEVBQUUsY0FBVztBQUNYLG9CQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQzthQUNoRDs7QUFFRCxpQkFBSyxFQUFFLGVBQVMsRUFBRSxFQUFFO0FBQ2hCLG9CQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN6QjtTQUNKLENBQUM7O0FBRUYsZUFBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QixjQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsWUFBSSxFQUFFLENBQUM7S0FFVixDQUFDLENBQUM7O0FBRUgsYUFBUyxDQUFDLFVBQVMsSUFBSSxFQUFFO0FBQ3JCLFlBQUksWUFBWSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDaEMsZUFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQyxDQUFDLENBQUM7O0FBRUgsYUFBUyxDQUFDLFlBQVc7QUFDakIsb0JBQVksR0FBRyxLQUFLLENBQUM7S0FDeEIsQ0FBQyxDQUFDOztBQUVILE9BQUcsQ0FBQyx1QkFBdUIsRUFBRSxVQUFTLElBQUksRUFBRTtBQUN4QyxjQUFNLENBQUMsS0FBSyxFQUFFLENBQ2QsSUFBSSxDQUFDLFlBQVc7QUFDWixtQkFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUNYLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNiLENBQUMsQ0FBQztLQUNOLENBQUMsQ0FBQzs7QUFFSCxPQUFHLENBQUMseUJBQXlCLEVBQUUsVUFBUyxJQUFJLEVBQUU7O0FBRTFDLGNBQU0sQ0FBQyxLQUFLLEVBQUUsQ0FDZCxJQUFJLENBQUMsVUFBUyxNQUFNLEVBQUU7QUFDbEIsbUJBQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzNCLENBQUMsQ0FDRixJQUFJLENBQUMsWUFBVztBQUNaLG1CQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUNoQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQ1gsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2IsQ0FBQyxTQUNHLENBQUMsSUFBSSxDQUFDLENBQUM7S0FFZixDQUFDLENBQUM7O0FBRUgsT0FBRyxDQUFDLDZCQUE2QixFQUFFLFVBQVMsSUFBSSxFQUFFOztBQUU5QyxvQkFBWSxHQUFHLElBQUksQ0FBQzs7QUFFcEIsZUFBTyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQ3JCLElBQUksQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUNsQixtQkFBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDNUIsQ0FBQyxDQUNGLElBQUksQ0FBQyxZQUFXO0FBQ1osbUJBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQ2hCLEdBQUcsQ0FBQyxVQUFTLEdBQUcsRUFBRTtBQUNkLG9CQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxRQUFLLEVBQUUsQ0FBQztBQUNyQixvQkFBSSxFQUFFLENBQUM7YUFDVixDQUFDLENBQUM7U0FDTixDQUFDLENBQUE7S0FDTCxDQUFDLENBQUE7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoiTWFuYWdlZFNlcnZlcl90ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG11c3QgPSByZXF1aXJlKCdtdXN0Jyk7XG52YXIgc3VwZXJ0ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG52YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xudmFyIE1hbmFnZWRTZXJ2ZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvY29tbW9uL01hbmFnZWRTZXJ2ZXInKTtcblxudmFyIHNlcnZlcjtcbnZhciBhcHA7XG52YXIgcmVxdWVzdDtcbnZhciBpbXBsO1xudmFyIERPX05PVF9DTE9TRSA9IGZhbHNlO1xuXG5kZXNjcmliZSgnTWFuYWdlZFNlcnZlcicsIGZ1bmN0aW9uKCkge1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbihkb25lKSB7XG5cbiAgICAgICAgYXBwID0gZXhwcmVzcygpO1xuXG4gICAgICAgIGFwcC5nZXQoJy8nLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDQpLnNlbmQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW1wbCA9IHtcblxuICAgICAgICAgICAgc2VydmVyOiBodHRwLmNyZWF0ZVNlcnZlcihhcHApLFxuXG4gICAgICAgICAgICBsaXN0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbig3Nzc3KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZlci5vbi5hcHBseSh0aGlzLnNlcnZlciwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbihjYikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyLmNsb3NlKGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXF1ZXN0ID0gc3VwZXJ0ZXN0KGFwcCk7XG4gICAgICAgIHNlcnZlciA9IG5ldyBNYW5hZ2VkU2VydmVyKGltcGwpO1xuICAgICAgICBkb25lKCk7XG5cbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChmdW5jdGlvbihkb25lKSB7XG4gICAgICAgIGlmIChET19OT1RfQ0xPU0UpIHJldHVybiBkb25lKCk7XG4gICAgICAgIHJldHVybiBpbXBsLnNlcnZlci5jbG9zZShkb25lKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgRE9fTk9UX0NMT1NFID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICB4aXQoJ211c3QgYmUgYWJsZSB0byBzdGFydCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgc2VydmVyLnN0YXJ0KCkuXG4gICAgICAgIHRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmdldCgnLycpLlxuICAgICAgICAgICAgZXhwZWN0KDIwNCkuXG4gICAgICAgICAgICBlbmQoZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgeGl0KCdtdXN0IGJlIGFibGUgdG8gcmVzdGFydCcsIGZ1bmN0aW9uKGRvbmUpIHtcblxuICAgICAgICBzZXJ2ZXIuc3RhcnQoKS5cbiAgICAgICAgdGhlbihmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXIucmVzdGFydCgpO1xuICAgICAgICB9KS5cbiAgICAgICAgdGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuZ2V0KCcvJykuXG4gICAgICAgICAgICBleHBlY3QoMjA0KS5cbiAgICAgICAgICAgIGVuZChkb25lKTtcbiAgICAgICAgfSkuXG4gICAgICAgIGNhdGNoKGRvbmUpO1xuXG4gICAgfSk7XG5cbiAgICB4aXQoJ211c3QgYmUgYWJsZSB0byBiZSBzaHV0ZG93bicsIGZ1bmN0aW9uKGRvbmUpIHtcblxuICAgICAgICBET19OT1RfQ0xPU0UgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBzZXJ2ZXIuc3RhcnQoKS5cbiAgICAgICAgdGhlbihmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXIuc2h1dGRvd24oKTtcbiAgICAgICAgfSkuXG4gICAgICAgIHRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmdldCgnLycpLlxuICAgICAgICAgICAgZW5kKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIG11c3QodHJ1ZSkuYmUudHJ1ZSgpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH0pXG59KTtcbiJdfQ==