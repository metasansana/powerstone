import http from 'http';
import https from 'https';

/**
 * ServerFactory provides new instances for http.Server or the
 * framework's own wrapper.
 *
 * Powerstone wraps these in its own wrapper to provide a maintainable api.
 */
class ServerFactory {

    /**
     * createNativeWebServer creates and returns a http.Server
     * @param {express.Application} app
     * @returns {*}
     */
    createNativeWebServer(app) {
        return http.createServer(app);
    }

    /**
     * createSecureNativeWebServer creates and returns a https.Server
     * @param {Object} options
     * @param {express.Application} app
     * @returns {*}
     */
    createSecureNativeWebServer(options, app) {
        return https.createServer(options, app);
    }

    createWebServer(app, module) {

        var options = module.configuration.read('https', null);

        if (options) return this.createSecureNativeWebServer(options, app);

        return this.createNativeWebServer(app);
    }

}

export default new ServerFactory();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWIvU2VydmVyRmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJodHRwIiwiaHR0cHMiLCJTZXJ2ZXJGYWN0b3J5IiwiY3JlYXRlTmF0aXZlV2ViU2VydmVyIiwiYXBwIiwiY3JlYXRlU2VydmVyIiwiY3JlYXRlU2VjdXJlTmF0aXZlV2ViU2VydmVyIiwib3B0aW9ucyIsImNyZWF0ZVdlYlNlcnZlciIsIm1vZHVsZSIsImNvbmZpZ3VyYXRpb24iLCJyZWFkIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxJQUFQLE1BQWlCLE1BQWpCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjs7QUFFQTs7Ozs7O0FBTUEsTUFBTUMsYUFBTixDQUFvQjs7QUFFaEI7Ozs7O0FBS0FDLDBCQUFzQkMsR0FBdEIsRUFBMkI7QUFDdkIsZUFBT0osS0FBS0ssWUFBTCxDQUFrQkQsR0FBbEIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQUUsZ0NBQTRCQyxPQUE1QixFQUFxQ0gsR0FBckMsRUFBMEM7QUFDdEMsZUFBT0gsTUFBTUksWUFBTixDQUFtQkUsT0FBbkIsRUFBNEJILEdBQTVCLENBQVA7QUFDSDs7QUFFREksb0JBQWdCSixHQUFoQixFQUFxQkssTUFBckIsRUFBNkI7O0FBRXpCLFlBQUlGLFVBQVVFLE9BQU9DLGFBQVAsQ0FBcUJDLElBQXJCLENBQTBCLE9BQTFCLEVBQW1DLElBQW5DLENBQWQ7O0FBRUEsWUFBSUosT0FBSixFQUNJLE9BQU8sS0FBS0QsMkJBQUwsQ0FBaUNDLE9BQWpDLEVBQTBDSCxHQUExQyxDQUFQOztBQUVKLGVBQU8sS0FBS0QscUJBQUwsQ0FBMkJDLEdBQTNCLENBQVA7QUFDSDs7QUE3QmU7O0FBaUNwQixlQUFlLElBQUlGLGFBQUosRUFBZiIsImZpbGUiOiJTZXJ2ZXJGYWN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuXG4vKipcbiAqIFNlcnZlckZhY3RvcnkgcHJvdmlkZXMgbmV3IGluc3RhbmNlcyBmb3IgaHR0cC5TZXJ2ZXIgb3IgdGhlXG4gKiBmcmFtZXdvcmsncyBvd24gd3JhcHBlci5cbiAqXG4gKiBQb3dlcnN0b25lIHdyYXBzIHRoZXNlIGluIGl0cyBvd24gd3JhcHBlciB0byBwcm92aWRlIGEgbWFpbnRhaW5hYmxlIGFwaS5cbiAqL1xuY2xhc3MgU2VydmVyRmFjdG9yeSB7XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGVOYXRpdmVXZWJTZXJ2ZXIgY3JlYXRlcyBhbmQgcmV0dXJucyBhIGh0dHAuU2VydmVyXG4gICAgICogQHBhcmFtIHtleHByZXNzLkFwcGxpY2F0aW9ufSBhcHBcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBjcmVhdGVOYXRpdmVXZWJTZXJ2ZXIoYXBwKSB7XG4gICAgICAgIHJldHVybiBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZVNlY3VyZU5hdGl2ZVdlYlNlcnZlciBjcmVhdGVzIGFuZCByZXR1cm5zIGEgaHR0cHMuU2VydmVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge2V4cHJlc3MuQXBwbGljYXRpb259IGFwcFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGNyZWF0ZVNlY3VyZU5hdGl2ZVdlYlNlcnZlcihvcHRpb25zLCBhcHApIHtcbiAgICAgICAgcmV0dXJuIGh0dHBzLmNyZWF0ZVNlcnZlcihvcHRpb25zLCBhcHApO1xuICAgIH1cblxuICAgIGNyZWF0ZVdlYlNlcnZlcihhcHAsIG1vZHVsZSkge1xuXG4gICAgICAgIHZhciBvcHRpb25zID0gbW9kdWxlLmNvbmZpZ3VyYXRpb24ucmVhZCgnaHR0cHMnLCBudWxsKTtcblxuICAgICAgICBpZiAob3B0aW9ucylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNlY3VyZU5hdGl2ZVdlYlNlcnZlcihvcHRpb25zLCBhcHApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU5hdGl2ZVdlYlNlcnZlcihhcHApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgU2VydmVyRmFjdG9yeSgpO1xuIl19