import express from 'express';
import Configuration from '../common/Configuration';
import Module from '../common/Module';
import Route from '../common/route/Route';

const BASKET = {};

class WebModule extends Module {

    constructor(name, config, context, app) {

        super(name, config, context, app);

        this._expressApp = express();
        this.configDirectory = 'webconf';

        this.viewEngine = function (view, locals) {

            return function render_web_view(req, res, next) {

                res.render(view, locals, function (err, html) {

                    if (err) next(err);
                    res.send(html);
                });
            };
        };
    }

    __framework() {

        var engine = this.configuration.read(this.configuration.keys.WEB_VIEWS_ENGINE, null);
        var settings = this.configuration.read(this.configuration.keys.WEB_FRAMEWORK_SETTINGS, BASKET);

        switch (typeof engine) {

            case 'function':
                engine(this._expressApp, this.configuration);
                break;

            case 'string':
                this._expressApp.set('views', this.configuration.read(this.configuration.keys.WEB_VIEWS_PATHS, this.configuration.paths.views));
                this._expressApp.set('view engine', engine);
                break;
            case null:
                break;

            default:
                break;

        }

        Object.keys(settings).forEach(key => this._expressApp.set(key, settings[key]));
        this.modules.__framework();
    }

    __filters(app, defaults) {

        super.__filters(this._expressApp, defaults);
    }

    __routing(point, app, actions) {

        var path = this.configuration.read(Configuration.keys.PATH, `/${ this.name }`);
        var routes = this.configuration.routes;

        Object.keys(routes).forEach(route => this.routes = Object.keys(routes[route]).map(method => new Route(method, route, actions.generate(method, route, routes[route][method]), this._expressApp)));

        this.modules.__routing(path, this._expressApp, actions);
        app.use(path, this._expressApp);
    }

}

export default WebModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWIvV2ViTW9kdWxlLmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJDb25maWd1cmF0aW9uIiwiTW9kdWxlIiwiUm91dGUiLCJCQVNLRVQiLCJXZWJNb2R1bGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJjb25maWciLCJjb250ZXh0IiwiYXBwIiwiX2V4cHJlc3NBcHAiLCJjb25maWdEaXJlY3RvcnkiLCJ2aWV3RW5naW5lIiwidmlldyIsImxvY2FscyIsInJlbmRlcl93ZWJfdmlldyIsInJlcSIsInJlcyIsIm5leHQiLCJyZW5kZXIiLCJlcnIiLCJodG1sIiwic2VuZCIsIl9fZnJhbWV3b3JrIiwiZW5naW5lIiwiY29uZmlndXJhdGlvbiIsInJlYWQiLCJrZXlzIiwiV0VCX1ZJRVdTX0VOR0lORSIsInNldHRpbmdzIiwiV0VCX0ZSQU1FV09SS19TRVRUSU5HUyIsInNldCIsIldFQl9WSUVXU19QQVRIUyIsInBhdGhzIiwidmlld3MiLCJPYmplY3QiLCJmb3JFYWNoIiwia2V5IiwibW9kdWxlcyIsIl9fZmlsdGVycyIsImRlZmF1bHRzIiwiX19yb3V0aW5nIiwicG9pbnQiLCJhY3Rpb25zIiwicGF0aCIsIlBBVEgiLCJyb3V0ZXMiLCJyb3V0ZSIsIm1hcCIsIm1ldGhvZCIsImdlbmVyYXRlIiwidXNlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLFNBQXBCO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQix5QkFBMUI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGtCQUFuQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsdUJBQWxCOztBQUVBLE1BQU1DLFNBQVMsRUFBZjs7QUFFQSxNQUFNQyxTQUFOLFNBQXdCSCxNQUF4QixDQUErQjs7QUFFM0JJLGdCQUFZQyxJQUFaLEVBQWtCQyxNQUFsQixFQUEwQkMsT0FBMUIsRUFBbUNDLEdBQW5DLEVBQXdDOztBQUVwQyxjQUFNSCxJQUFOLEVBQVlDLE1BQVosRUFBb0JDLE9BQXBCLEVBQTZCQyxH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O0FBQ0g7O0FBOUUwQjs7QUFrRi9CLGVBQWVOLFNBQWYiLCJmaWxlIjoiV2ViTW9kdWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgQ29uZmlndXJhdGlvbiBmcm9tICcuLi9jb21tb24vQ29uZmlndXJhdGlvbic7XG5pbXBvcnQgTW9kdWxlIGZyb20gJy4uL2NvbW1vbi9Nb2R1bGUnO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4uL2NvbW1vbi9yb3V0ZS9Sb3V0ZSc7XG5cbmNvbnN0IEJBU0tFVCA9IHt9O1xuXG5jbGFzcyBXZWJNb2R1bGUgZXh0ZW5kcyBNb2R1bGUge1xuXG4gICAgY29uc3RydWN0b3IobmFtZSwgY29uZmlnLCBjb250ZXh0LCBhcHApIHtcblxuICAgICAgICBzdXBlcihuYW1lLCBjb25maWcsIGNvbnRleHQsIGFwcCk7XG5cbiAgICAgICAgdGhpcy5fZXhwcmVzc0FwcCA9IGV4cHJlc3MoKTtcbiAgICAgICAgdGhpcy5jb25maWdEaXJlY3RvcnkgPSAnd2ViY29uZic7XG5cbiAgICAgICAgdGhpcy52aWV3RW5naW5lID0gZnVuY3Rpb24odmlldywgbG9jYWxzKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiByZW5kZXJfd2ViX3ZpZXcocmVxLCByZXMsIG5leHQpIHtcblxuICAgICAgICAgICAgICAgIHJlcy5yZW5kZXIodmlldywgbG9jYWxzLCBmdW5jdGlvbihlcnIsIGh0bWwpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSBuZXh0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zZW5kKGh0bWwpO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgX19mcmFtZXdvcmsoKSB7XG5cbiAgICAgICAgdmFyIGVuZ2luZSA9IHRoaXMuY29uZmlndXJhdGlvbi5yZWFkKHRoaXMuY29uZmlndXJhdGlvbi5rZXlzLldFQl9WSUVXU19FTkdJTkUsIG51bGwpO1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSB0aGlzLmNvbmZpZ3VyYXRpb24ucmVhZCh0aGlzLmNvbmZpZ3VyYXRpb24ua2V5cy5XRUJfRlJBTUVXT1JLX1NFVFRJTkdTLFxuICAgICAgICAgICAgQkFTS0VUKTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlbmdpbmUpIHtcblxuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIGVuZ2luZSh0aGlzLl9leHByZXNzQXBwLCB0aGlzLmNvbmZpZ3VyYXRpb24pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc0FwcC5zZXQoJ3ZpZXdzJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLnJlYWQodGhpcy5jb25maWd1cmF0aW9uLmtleXMuV0VCX1ZJRVdTX1BBVEhTLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLnBhdGhzLnZpZXdzKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc0FwcC5zZXQoJ3ZpZXcgZW5naW5lJywgZW5naW5lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmtleXMoc2V0dGluZ3MpLmZvckVhY2goa2V5ID0+IHRoaXMuX2V4cHJlc3NBcHAuc2V0KGtleSwgc2V0dGluZ3Nba2V5XSkpO1xuICAgICAgICB0aGlzLm1vZHVsZXMuX19mcmFtZXdvcmsoKTtcblxuXG4gICAgfVxuXG4gICAgX19maWx0ZXJzKGFwcCwgZGVmYXVsdHMpIHtcblxuICAgICAgICBzdXBlci5fX2ZpbHRlcnModGhpcy5fZXhwcmVzc0FwcCwgZGVmYXVsdHMpO1xuXG4gICAgfVxuXG4gICAgX19yb3V0aW5nKHBvaW50LCBhcHAsIGFjdGlvbnMpIHtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMuY29uZmlndXJhdGlvbi5yZWFkKENvbmZpZ3VyYXRpb24ua2V5cy5QQVRILCBgLyR7dGhpcy5uYW1lfWApO1xuICAgICAgICB2YXIgcm91dGVzID0gdGhpcy5jb25maWd1cmF0aW9uLnJvdXRlcztcblxuICAgICAgICBPYmplY3Qua2V5cyhyb3V0ZXMpLlxuICAgICAgICBmb3JFYWNoKHJvdXRlID0+XG4gICAgICAgICAgICB0aGlzLnJvdXRlcyA9IE9iamVjdC5rZXlzKHJvdXRlc1tyb3V0ZV0pLm1hcChtZXRob2QgPT5cbiAgICAgICAgICAgICAgICBuZXcgUm91dGUobWV0aG9kLCByb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5nZW5lcmF0ZShtZXRob2QsIHJvdXRlLCByb3V0ZXNbcm91dGVdW21ldGhvZF0pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzQXBwKSkpO1xuXG4gICAgICAgIHRoaXMubW9kdWxlcy5fX3JvdXRpbmcocGF0aCwgdGhpcy5fZXhwcmVzc0FwcCwgYWN0aW9ucyk7XG4gICAgICAgIGFwcC51c2UocGF0aCwgdGhpcy5fZXhwcmVzc0FwcCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYk1vZHVsZVxuIl19