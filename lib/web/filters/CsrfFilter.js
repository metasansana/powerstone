import csrf from 'csurf';

/**
 * CsrfFilter 
 * @implements {Filter}
 */
class CsrfFilter {

    apply(app, config) {

        if (config.read(config.keys.FILTERS_CSRF_ENABLED, false)) {

            app.use(csrf(config.read(config.keys.FILTERS_CSRF_OPTIONS, {
                cookie: true
            })));

            app.use(function send_csrf_token(req, res, next) {

                res.set('x-csrf-token', req.csrfToken());
                res.cookie('x-csrf-token', req.csrfToken());
                res.locals._csrf = req.csrfToken();
                next();
            });

            //TODO allow client code to hook into this instead of this lame handler
            app.use(function if_csrf_error(err, req, res, next) {

                if (err.code !== 'EBADCSRFTOKEN') return next(err);
                res.status(403);
                res.send('INVALID TOKEN');
            });
        }
    }
}

export default new CsrfFilter();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93ZWIvZmlsdGVycy9Dc3JmRmlsdGVyLmpzIl0sIm5hbWVzIjpbImNzcmYiLCJDc3JmRmlsdGVyIiwiYXBwbHkiLCJhcHAiLCJjb25maWciLCJyZWFkIiwia2V5cyIsIkZJTFRFUlNfQ1NSRl9FTkFCTEVEIiwidXNlIiwiRklMVEVSU19DU1JGX09QVElPTlMiLCJjb29raWUiLCJzZW5kX2NzcmZfdG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2V0IiwiY3NyZlRva2VuIiwibG9jYWxzIiwiX2NzcmYiLCJpZl9jc3JmX2Vycm9yIiwiZXJyIiwiY29kZSIsInN0YXR1cyIsInNlbmQiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLElBQVAsTUFBaUIsT0FBakI7O0FBRUE7Ozs7QUFJQSxNQUFNQyxVQUFOLENBQWlCOztBQUViQyxVQUFNQyxHQUFOLEVBQVdDLE1BQVgsRUFBbUI7O0FBRWYsWUFBSUEsT0FBT0MsSUFBUCxDQUFZRCxPQUFPRSxJQUFQLENBQVlDLG9CQUF4QixFQUE4QyxLQUE5QyxDQUFKLEVBQTBEOztBQUVsREosZ0JBQUlLLEdBQUosQ0FBUVIsS0FBS0ksT0FBT0MsSUFBUCxDQUFZRCxPQUFPRSxJQUFQLENBQVlHLG9CQUF4QixFQUE4QztBQUN2REMsd0JBQVE7QUFEK0MsYUFBOUMsQ0FBTCxDQUFSOztBQUlBUCxnQkFBSUssR0FBSixDQUFRLFNBQVNHLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCQyxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUM7O0FBRTdDRCxvQkFBSUUsR0FBSixDQUFRLGNBQVIsRUFBd0JILElBQUlJLFNBQUosRUFBeEI7QUFDQUgsb0JBQUlILE1BQUosQ0FBVyxjQUFYLEVBQTJCRSxJQUFJSSxTQUFKLEVBQTNCO0FBQ0FILG9CQUFJSSxNQUFKLENBQVdDLEtBQVgsR0FBbUJOLElBQUlJLFNBQUosRUFBbkI7QUFDQUY7QUFFSCxhQVBEOztBQVNBO0FBQ0FYLGdCQUFJSyxHQUFKLENBQVEsU0FBU1csYUFBVCxDQUF1QkMsR0FBdkIsRUFBNEJSLEdBQTVCLEVBQWlDQyxHQUFqQyxFQUFzQ0MsSUFBdEMsRUFBNEM7O0FBRWhELG9CQUFJTSxJQUFJQyxJQUFKLEtBQWEsZUFBakIsRUFBa0MsT0FBT1AsS0FBS00sR0FBTCxDQUFQO0FBQ2xDUCxvQkFBSVMsTUFBSixDQUFXLEdBQVg7QUFDQVQsb0JBQUlVLElBQUosQ0FBUyxlQUFUO0FBRUgsYUFORDtBQVFIO0FBQ0o7QUE3QlE7O0FBZ0NiLGVBQWUsSUFBSXRCLFVBQUosRUFBZiIsImZpbGUiOiJDc3JmRmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNzcmYgZnJvbSAnY3N1cmYnO1xuXG4vKipcbiAqIENzcmZGaWx0ZXIgXG4gKiBAaW1wbGVtZW50cyB7RmlsdGVyfVxuICovXG5jbGFzcyBDc3JmRmlsdGVyIHtcblxuICAgIGFwcGx5KGFwcCwgY29uZmlnKSB7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5yZWFkKGNvbmZpZy5rZXlzLkZJTFRFUlNfQ1NSRl9FTkFCTEVELCBmYWxzZSkpIHtcblxuICAgICAgICAgICAgICAgIGFwcC51c2UoY3NyZihjb25maWcucmVhZChjb25maWcua2V5cy5GSUxURVJTX0NTUkZfT1BUSU9OUywge1xuICAgICAgICAgICAgICAgICAgICBjb29raWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSkpO1xuXG4gICAgICAgICAgICAgICAgYXBwLnVzZShmdW5jdGlvbiBzZW5kX2NzcmZfdG9rZW4ocmVxLCByZXMsIG5leHQpIHtcblxuICAgICAgICAgICAgICAgICAgICByZXMuc2V0KCd4LWNzcmYtdG9rZW4nLCByZXEuY3NyZlRva2VuKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXMuY29va2llKCd4LWNzcmYtdG9rZW4nLCByZXEuY3NyZlRva2VuKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXMubG9jYWxzLl9jc3JmID0gcmVxLmNzcmZUb2tlbigpO1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vVE9ETyBhbGxvdyBjbGllbnQgY29kZSB0byBob29rIGludG8gdGhpcyBpbnN0ZWFkIG9mIHRoaXMgbGFtZSBoYW5kbGVyXG4gICAgICAgICAgICAgICAgYXBwLnVzZShmdW5jdGlvbiBpZl9jc3JmX2Vycm9yKGVyciwgcmVxLCByZXMsIG5leHQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgIT09ICdFQkFEQ1NSRlRPS0VOJykgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDMpO1xuICAgICAgICAgICAgICAgICAgICByZXMuc2VuZCgnSU5WQUxJRCBUT0tFTicpO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBkZWZhdWx0IG5ldyBDc3JmRmlsdGVyKClcbiJdfQ==