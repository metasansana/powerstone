{"version":3,"sources":["../../src/api/ApiModule.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;mCAA0B,yBAAyB;;;;4BAChC,kBAAkB;;;;gCACnB,uBAAuB;;;;uBACrB,SAAS;;;;;;;;;;;;;IAUvB,SAAS;cAAT,SAAS;;AAEA,aAFT,SAAS,CAEC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE;8BAFtC,SAAS;;AAIP,mCAJF,SAAS,6CAID,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE;;AAElC,YAAI,CAAC,UAAU,GAAG,YAAW;AACzB,kBAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD,CAAA;KAEJ;;iBAVC,SAAS;;eAaA,uBAAG,EAGb;;;eAEQ,mBAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE;;;AAE3B,gBAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAK,KAAK,SAAI,IAAI,CAAC,IAAI,CAAG,CAAC;AAC1F,gBAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC;;AAE9C,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CACnB,OAAO,CAAC,UAAA,KAAK;uBACT,MAAK,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,MAAM;2BAC/C,kCAAU,MAAM,EAAK,IAAI,SAAI,KAAK,EAC9B,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAK,IAAI,SAAI,KAAK,EACrC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;iBAAA,CAAC;aAAA,CAAC,CAAC;;AAE/C,gBAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SAE9C;;;WAhCC,SAAS;;;qBAoCA,SAAS","file":"ApiModule.js","sourcesContent":["import Configuration from '../common/Configuration';\nimport Module from '../common/Module';\nimport Route from '../common/route/Route';\nimport restify from 'restify';\n\n/**\n * Module\n * @param {string} fqn The name of the module prefixed with its parent modules \n * @param {string} path \n * @param {Configuration} config \n * @param {Loader} loader \n * @param {Application} app \n */\nclass ApiModule extends Module {\n\n    constructor(name, config, context, app) {\n\n        super(name, config, context, app);\n\n        this.viewEngine = function() {\n            throw new Error('ApiModule does not support views!');\n        }\n\n    }\n\n\n    __framework() {\n\n\n    }\n\n    __routing(point, app, actions) {\n\n        var path = this.configuration.read(this.configuration.keys.PATH, `${point}/${this.name}`);\n        var routes = this.configuration.routes.routes;\n\n        Object.keys(routes).\n        forEach(route =>\n            this.routes = Object.keys(routes[route]).map(method =>\n                new Route(method, `${path}/${route}`,\n                    actions.generate(method, `${path}/${route}`,\n                        routes[route][method]), app)));\n\n        this.modules.__routing(path, app, actions);\n\n    }\n\n}\n\nexport default ApiModule\n"]}