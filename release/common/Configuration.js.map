{"version":3,"sources":["../../src/common/Configuration.js"],"names":[],"mappings":"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","file":"Configuration.js","sourcesContent":["import Property from 'property-seek';\nimport deepmerge from 'deepmerge';\nimport fs from 'fs';\nimport Path from 'path';\nimport crypto from 'crypto';\nimport Pool from '../net/Pool';\nimport PropertyResource from './resource/PropertyResource';\nimport RequireResource from './resource/RequireResource';\nimport StringResource from './resource/StringResource';\nimport SchemeResource from './resource/SchemeResource';\n\nconst keys = {\n    MODULES: 'power.modules',\n    MODULES_PREVENTED: 'power.modules.preventRouting',\n    CONNECTIONS: 'power.connections',\n    MIDDLEWARE: 'power.app.middleware',\n    CONTROLLERS: 'power.app.controllers',\n    PATH: 'power.routing.root',\n    WEB_FRAMEWORK_SETTINGS: 'power.web.framework.settings',\n    WEB_VIEWS_ENGINE: 'power.web.views.engine',\n    WEB_VIEWS_PATHS: 'power.web.views.paths',\n    FILTERS: 'power.filters',\n    FILTERS_PARSER_JSON_ENABLED: 'power.filters.parser.json.enabled',\n    FILTERS_PARSER_JSON_OPTIONS: 'power.filters.parser.json.options',\n    FILTERS_PARSER_URLENCODED_ENABLED: 'power.filters.parser.urlencoded.enabled',\n    FILTERS_PARSER_URLENCODED_OPTIONS: 'power.filters.parser.urlencoded.options',\n    FILTERS_PARSER_TEXT_ENABLED: 'power.filters.parser.text.enabled',\n    FILTERS_PARSER_TEXT_OPTIONS: 'power.filters.parser.text.options',\n    FILTERS_PARSER_RAW_ENABLED: 'power.filters.parser.raw.enabled',\n    FILTERS_PARSER_RAW_OPTIONS: 'power.filters.parser.raw.options',\n    FILTERS_CSRF_ENABLED: 'power.filters.csrf.enabled',\n    FILTERS_CSRF_OPTIONS: 'power.filters.csrf.options',\n    FILTERS_LOG_ENABLED: 'power.filters.log.enabled',\n    FILTERS_LOG_FORMAT: 'power.filters.log.format',\n    FILTERS_LOG_OPTIONS: 'power.filters.log.options',\n    FILTERS_ASSET_PATHS: 'power.filters.asset.paths',\n    FILTERS_ASSET_PATHS_OPTIONS: 'power.filters.asset.options',\n    FILTERS_ASSET_DIRECTORY: 'power.filters.asset.directory',\n    FILTERS_ASSET_DIRECTORY_OPTIONS: 'power.filters.asset.options'\n\n};\n\nconst defaults = {\n    SECRET: crypto.randomBytes(32).toString('hex')\n};\n\nfunction exists(path) {\n\n    try {\n        return fs.statSync(path).isFile();\n    } catch (e) {\n        return false;\n\n    }\n}\n\n\n/**\n * Configuration provides an api for reading interesting values from a\n * modules configuration.\n * @param {string} dir\n * @param {string} path \n * @property {object} keys\n * @property {string} path\n * TODO Document the properties of this class properly.\n */\nclass Configuration {\n\n    constructor(dir, path) {\n\n        this.paths = {\n            root: path,\n            config: `${path}/${dir}/config.js`,\n            routes: `${path}/${dir}/routes.js`,\n            modules: `${path}/modules`,\n            connectors: `${path}/connectors`,\n            filters: `${path}/filters`,\n            middleware: `${path}/app/middleware`,\n            controllers: `${path}/app/controllers`,\n            views: `${path}/app/views`,\n            lib: `${path}/lib`,\n            public: `${path}/public`\n        };\n\n        this.keys = keys;\n        this.defaults = defaults;\n        this.options = (exists(this.paths.config)) ? require(this.paths.config) : {};\n        this.routes = (exists(this.paths.routes)) ? require(this.paths.routes) : {};\n        this._resources = new SchemeResource(new StringResource());\n        this._resources.add('require', new RequireResource());\n        this._resources.add('lib', new RequireResource(`${this.paths.lib}/`));\n        this._resources.add('env', new PropertyResource(process.env));\n        this._resources.add('pool', new PropertyResource(Pool));\n\n    }\n\n    read(key, defaults, merge) {\n\n        var ret = (this.options.hasOwnProperty(key)) ? this.options[key] : defaults;\n\n        if (typeof ret === 'string')\n            return this._resources.find(ret);\n\n        if (merge)\n            return deepmerge(ret, merge);\n\n        return ret;\n\n    }\n\n    /**\n     * require requires all files in a sub-directory into a single object\n     * @param {string} dir The  path.\n     * @param {object} merge An optional object functions can be merged into.\n     * @param {string} [prefix] A prefix that will be concatenated to the object's keys\n     * @returns {Object}\n     */\n    require(dir, merge, prefix) {\n\n        var files;\n        var extensions = extensions || ['.js', '.json'];\n\n        merge = merge || {};\n\n        prefix = prefix || '';\n        prefix = (prefix) ? prefix + '.' : prefix;\n        prefix = (prefix[0] === '/') ? prefix.replace('/', '') : prefix;\n        prefix = prefix.replace(/\\//g, '.');\n\n        try {\n            files = fs.readdirSync(dir);\n        } catch (e) {\n            return merge || {};\n        }\n        if (Array.isArray(files))\n            files.forEach((pathToFile) => {\n\n                if (extensions.indexOf(Path.extname(pathToFile)) < 0) return;\n\n                Property.set(merge, prefix + Path.basename(pathToFile, Path.extname(pathToFile)),\n                    require(dir + '/' + pathToFile));\n\n            });\n\n        return merge;\n    }\n\n}\n\nConfiguration.keys = {\n    MODULES: 'modules',\n    CONNECTIONS: 'connections',\n    MIDDLEWARE: 'middleware',\n    FILTERS: 'filters',\n    PATH: 'path'\n};\n\nexport default Configuration\n"]}