{"version":3,"sources":["../../src/common/Configuration.js"],"names":[],"mappings":";;;;;;;;;;;;4BAAqB,eAAe;;;;yBAClB,WAAW;;;;AAE7B,SAAS,MAAM,CAAC,IAAI,EAAE;;AAElB,QAAI;AACA,eAAO,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;KACrC,CAAC,OAAO,CAAC,EAAE;AACR,eAAO,KAAK,CAAC;KAEhB;CACJ;;;;;;;;;;IAUK,aAAa;AAEJ,aAFT,aAAa,CAEH,GAAG,EAAE,IAAI,EAAE;8BAFrB,aAAa;;AAIX,YAAI,CAAC,KAAK,GAAG;AACT,gBAAI,EAAE,IAAI;AACV,kBAAM,EAAK,IAAI,SAAI,GAAG,eAAY;AAClC,kBAAM,EAAK,IAAI,SAAI,GAAG,eAAY;AAClC,mBAAO,EAAK,IAAI,aAAU;SAC7B,CAAC;;AAEF,YAAI,CAAC,OAAO,GAAG,AAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;AAC7E,YAAI,CAAC,MAAM,GAAG,AAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;KAE/E;;iBAdC,aAAa;;eAgBX,cAAC,GAAG,EAAE,QAAQ,EAAE;AAChB,gBAAI,GAAG,GAAG,0BAAS,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AAC1C,gBAAI,GAAG,EAAE,OAAO,GAAG,CAAC;AACpB,mBAAO,QAAQ,CAAC;SACnB;;;eAEW,sBAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE;AAChC,gBAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAC/C,mBAAO,4BAAM,MAAM,EAAE,GAAG,CAAC,CAAC;SAC7B;;;WAzBC,aAAa;;;AA6BnB,aAAa,CAAC,IAAI,GAAG;AACjB,WAAO,EAAE,SAAS;AAClB,eAAW,EAAE,aAAa;AAC1B,cAAU,EAAE,YAAY;AACxB,QAAI,EAAE,MAAM;CACf,CAAC;;qBAEa,aAAa","file":"Configuration.js","sourcesContent":["import Property from 'property-seek';\nimport merge from 'deepmerge';\n\nfunction exists(path) {\n\n    try {\n        return fs.statSync(path).isFile();\n    } catch (e) {\n        return false;\n\n    }\n}\n\n\n/**\n * Configuration\n * @param {string} dir\n * @param {string} path \n * @property {object} keys\n * @property {string} path\n */\nclass Configuration {\n\n    constructor(dir, path) {\n\n        this.paths = {\n            root: path,\n            config: `${path}/${dir}/config.js`,\n            routes: `${path}/${dir}/routes.js`,\n            modules: `${path}/modules`\n        };\n\n        this.options = (exists(this.paths.config)) ? require(this.paths.config) : {};\n        this.routes = (exists(this.paths.routes)) ? require(this.paths.routes) : {};\n\n    }\n\n    read(key, defaults) {\n        var ret = Property.get(this.options, key);\n        if (ret) return ret;\n        return defaults;\n    }\n\n    readAndMerge(key, target, defaults) {\n        var ret = this.readWithDefaults(key, defaults);\n        return merge(target, ret);\n    }\n\n}\n\nConfiguration.keys = {\n    MODULES: 'modules',\n    CONNECTIONS: 'connections',\n    MIDDLEWARE: 'middleware',\n    PATH: 'path'\n};\n\nexport default Configuration\n"]}