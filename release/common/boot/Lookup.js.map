{"version":3,"sources":["../../../src/common/boot/Lookup.js"],"names":[],"mappings":";;;;;;;;;;;;mCAAgC,uBAAuB;;;;;;;;;;IAOjD,eAAe;aAAf,eAAe;8BAAf,eAAe;;;;;;;;;;;;;;;;;;;;iBAAf,eAAe;;;;;;;;eAOX,gBAAC,IAAI,EAAE,EAAE;;;WAPb,eAAe;;;IA4Bf,MAAM;AAEG,aAFT,MAAM,CAEI,MAAM,EAAE,OAAO,EAAE;8BAF3B,MAAM;;AAIJ,YAAI,CAAC,cAAc,GAAG,MAAM,CAAC;AAC7B,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,YAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;KAEpC;;;;;;;;iBARC,MAAM;;eAeL,aAAC,IAAI,EAAE,OAAO,EAAE;;AAEf,gBAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AAC/B,mBAAO,IAAI,CAAC;SAEf;;;eAEK,gBAAC,IAAI,EAAE;;AAET,gBAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC9B,gBAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;;AAEtB,gBAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAClB,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;AAElC,gBAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EACvC,MAAM,qCAAwB,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;AAErD,mBAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAEnD;;;WAnCC,MAAM;;;qBAuCG,MAAM","file":"Lookup.js","sourcesContent":["import UnknownHandlerError from './UnknownHandlerError';\n\n/**\n * Handler is an interface used to locate code resources.\n * @interface\n *\n */\nclass ResourceHandler {\n\n    /**\n     * handle looking up of a particular resource\n     * @param {string} path A string that tells us how to find the resource\n     * @returns {*}\n     */\n    handle(path) {}\n\n}\n\n\n/**\n * Lookup provides an api that lets client code determine which\n * handler to invoke to locate a piece of code we want to utilize.\n *\n * It works by utilizing a URL like string where the scheme tells us what \n * handler to use.\n * Example:\n * ```javascript\n *  \n *   'require://path-to-file-to-require'\n *\n * ```\n * @param {string} scheme The scheme for the default handler\n * @param {ResourceHandler} handler The default handler to use if nothing else matches.\n * @implements {ResourceHandler}\n */\nclass Lookup {\n\n    constructor(scheme, handler) {\n\n        this._defaultScheme = scheme;\n        this._handlers = {};\n        this._handlers[scheme] = handler;\n\n    }\n\n    /**\n     * add a handler to the internal list\n     * @param {string} name \n     * @param {ResourceHandler} handler\n     */\n    add(name, handler) {\n\n        this._handlers[name] = handler;\n        return this;\n\n    }\n\n    handle(path) {\n\n        var parts = path.split('://');\n        var handler = parts[0]\n\n        if (parts.length === 1)\n            handler = this._defaultScheme;\n\n        if (!this._handlers.hasOwnProperty(handler))\n            throw new UnknownHandlerError(handler, parts[1]);\n\n        return this._handlers[handler].handle(parts[1]);\n\n    }\n\n}\n\nexport default Lookup\n"]}